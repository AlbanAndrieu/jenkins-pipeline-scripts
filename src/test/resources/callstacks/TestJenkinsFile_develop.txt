   Jenkinsfile.run()
      Jenkinsfile.getDockerOpts({isDockerCompose=true})
      Jenkinsfile.pipeline(groovy.lang.Closure)
         Jenkinsfile.agent(groovy.lang.Closure)
            Jenkinsfile.docker(groovy.lang.Closure)
               Jenkinsfile.image(hub.docker.com/nabla/ansible-jenkins-slave-docker:latest)
               Jenkinsfile.alwaysPull(true)
               Jenkinsfile.reuseNode(true)
               Jenkinsfile.registryUrl(https://hub.docker.com)
               Jenkinsfile.registryCredentialsId(nabla)
               Jenkinsfile.args(-v /home/jenkins:/home/jenkins -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro -v /var/run/docker.sock:/var/run/docker.sock)
               Jenkinsfile.label(docker-compose||docker32G)
         Jenkinsfile.parameters(groovy.lang.Closure)
            Jenkinsfile.booleanParam({defaultValue=false, description=Dry run, name=DRY_RUN})
            Jenkinsfile.booleanParam({defaultValue=false, description=Clean before run, name=CLEAN_RUN})
            Jenkinsfile.booleanParam({defaultValue=false, description=Debug run, name=DEBUG_RUN})
            Jenkinsfile.booleanParam({defaultValue=false, description=Debug mvnw, name=MVNW_VERBOSE})
            Jenkinsfile.booleanParam({defaultValue=false, name=RELEASE, description=Perform release-type build.})
            Jenkinsfile.string({defaultValue=, name=RELEASE_BASE, description=Commit tag or branch that should be checked-out for release})
            Jenkinsfile.string({defaultValue=1.0.0, name=RELEASE_VERSION, description=Release version for artifacts})
         Jenkinsfile.environment(groovy.lang.Closure)
         Jenkinsfile.options(groovy.lang.Closure)
            Jenkinsfile.disableConcurrentBuilds()
            Jenkinsfile.parallelsAlwaysFailFast()
            Jenkinsfile.ansiColor(xterm)
            Jenkinsfile.timeout({time=180, unit=MINUTES})
            Jenkinsfile.timestamps()
         Jenkinsfile.stages(groovy.lang.Closure)
            Jenkinsfile.stage(Setup, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.load(src/test/jenkins/lib/myenv.groovy)
                        myenv.run()
                     myenv.getPropertyList()
                     Jenkinsfile.properties([])
                     myenv.printEnvironment()
                        myenv.println(COMPOSE_HTTP_TIMEOUT = 200)
                     Jenkinsfile.setBuildName()
                     Jenkinsfile.sh({returnStdout=true, script=./clean.sh})
                     Jenkinsfile.echo(RESULT : build.sh)
            Jenkinsfile.stage(➡ Build - Maven, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.sh(echo TEST : develop)
                     Jenkinsfile.withMavenWrapper({goal=install, profile=jacoco, skipSonar=true, skipPitest=true, skipArtifacts=true, buildCmdParameters=-Dserver=jetty9x -Dsonar.findbugs.allowuncompiledcode=true, mavenHome=/home/jenkins/.m2/, artifacts=**/target/dependency/jetty-runner.jar, **/target/test-config.jar, **/target/test.war, **/target/*.zip}, groovy.lang.Closure)
                     Jenkinsfile.withShellCheckWrapper({pattern=*.sh})
            Jenkinsfile.stage(SonarQube analysis, groovy.lang.Closure)
               Jenkinsfile.environment(groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.withSonarQubeWrapper({verbose=true, skipMaven=true, buildCmdParameters=-Dsonar.findbugs.allowuncompiledcode=true, isScannerHome=false, sonarExecutable=/usr/local/sonar-runner/bin/sonar-scanner, project=NABLA, repository=jenkins-pipeline-scripts}, groovy.lang.Closure)
            Jenkinsfile.stage(E2E tests, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.parallel({sample default maven project=groovy.lang.Closure})
                        Jenkinsfile.build({job=github.com/AlbanAndrieu/nabla-servers-bower-sample/master, propagate=false, wait=true})
            Jenkinsfile.stage(➕ Quality - Security - Checkmarx, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.withCheckmarxWrapper({projectName=jenkins-pipeline-scripts, preset=1, groupId=1234, lowThreshold=10, mediumThreshold=0, highThreshold=0})
         Jenkinsfile.post(groovy.lang.Closure)
            Jenkinsfile.always(groovy.lang.Closure)
               Jenkinsfile.node(any, groovy.lang.Closure)
                  Jenkinsfile.runHtmlPublishers([LogParserPublisher, AnalysisPublisher])
            Jenkinsfile.cleanup(groovy.lang.Closure)
               Jenkinsfile.wrapCleanWsOnNode({isEmailEnabled=false})
