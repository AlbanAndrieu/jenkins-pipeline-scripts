   Jenkinsfile.run()
      Jenkinsfile.dockerTag(temp)
      Jenkinsfile.getDockerOpts({isDockerCompose=true})
      Jenkinsfile.pipeline(groovy.lang.Closure)
         Jenkinsfile.agent(groovy.lang.Closure)
            Jenkinsfile.docker(groovy.lang.Closure)
               Jenkinsfile.image(nabla/ansible-jenkins-slave-docker:latest)
               Jenkinsfile.alwaysPull(true)
               Jenkinsfile.reuseNode(true)
               Jenkinsfile.registryUrl(https://index.docker.io/v1)
               Jenkinsfile.registryCredentialsId(hub-docker-nabla)
               Jenkinsfile.args(-v /home/jenkins:/home/jenkins -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro -v /var/run/docker.sock:/var/run/docker.sock)
               Jenkinsfile.label(molecule)
         Jenkinsfile.parameters(groovy.lang.Closure)
            Jenkinsfile.booleanParam({defaultValue=false, description=Dry run, name=DRY_RUN})
            Jenkinsfile.booleanParam({defaultValue=false, description=Clean before run, name=CLEAN_RUN})
            Jenkinsfile.booleanParam({defaultValue=false, description=Debug run, name=DEBUG_RUN})
            Jenkinsfile.booleanParam({defaultValue=false, description=Debug mvnw, name=MVNW_VERBOSE})
            Jenkinsfile.booleanParam({defaultValue=false, name=RELEASE, description=Perform release-type build.})
            Jenkinsfile.string({defaultValue=, name=RELEASE_BASE, description=Commit tag or branch that should be checked-out for release})
            Jenkinsfile.string({defaultValue=1.0.0, name=RELEASE_VERSION, description=Release version for artifacts})
         Jenkinsfile.environment(groovy.lang.Closure)
         Jenkinsfile.options(groovy.lang.Closure)
            Jenkinsfile.disableConcurrentBuilds()
            Jenkinsfile.parallelsAlwaysFailFast()
            Jenkinsfile.ansiColor(xterm)
            Jenkinsfile.timeout({time=180, unit=MINUTES})
            Jenkinsfile.timestamps()
         Jenkinsfile.stages(groovy.lang.Closure)
            Jenkinsfile.stage(Setup, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.load(src/test/jenkins/lib/myenv.groovy)
                        myenv.run()
                     myenv.getPropertyList()
                     Jenkinsfile.properties([])
                     myenv.printEnvironment()
                        myenv.println(COMPOSE_HTTP_TIMEOUT = 200)
                     Jenkinsfile.setBuildName()
                     Jenkinsfile.sh({returnStdout=true, script=./clean.sh})
                     Jenkinsfile.echo(RESULT : build.sh)
            Jenkinsfile.stage(➡ Build - Maven, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.sh(echo TEST : feature_)
                     Jenkinsfile.withMavenWrapper({goal=install, profile=jacoco, skipSonar=true, skipPitest=true, skipArtifacts=true, buildCmdParameters=-Dserver=jetty9x -Dsonar.findbugs.allowuncompiledcode=true, mavenHome=/home/jenkins/.m2/, artifacts=**/target/dependency/jetty-runner.jar, **/target/test-config.jar, **/target/test.war, **/target/*.zip}, groovy.lang.Closure)
                     Jenkinsfile.withShellCheckWrapper({pattern=*.sh})
                     Jenkinsfile.step({$class=CoberturaPublisher, autoUpdateHealth=false, autoUpdateStability=false, coberturaReportFile=**/coverage.xml, failUnhealthy=false, failUnstable=false, failNoReports=false, maxNumberOfBuilds=0, onlyStable=false, sourceEncoding=ASCII, zoomCoverageChart=false})
                     Jenkinsfile.checkStyle()
                     Jenkinsfile.recordIssues({enabledForFailure=true, tool=null})
                     Jenkinsfile.cpd({pattern=**/target/cpd.xml})
                     Jenkinsfile.recordIssues({enabledForFailure=true, tool=null})
                     Jenkinsfile.pmdParser({pattern=**/target/pmd.xml})
                     Jenkinsfile.recordIssues({enabledForFailure=true, tool=null})
                     Jenkinsfile.mavenConsole()
                     Jenkinsfile.java({reportEncoding=UTF-8})
                     Jenkinsfile.javaDoc()
                     Jenkinsfile.spotBugs()
                     Jenkinsfile.excludeFile(.*\/target\/.*)
                     Jenkinsfile.excludeFile(node_modules\/.*)
                     Jenkinsfile.excludeFile(npm\/.*)
                     Jenkinsfile.excludeFile(bower_components\/.*)
                     Jenkinsfile.recordIssues({enabledForFailure=true, aggregatingResults=true, id=analysis-java, tools=[null, null, null, null], filters=[null, null, null, null]})
            Jenkinsfile.stage(➡ Build - Gradle, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.sh(./gradlew build --stacktrace)
                     Jenkinsfile.publishHTML({reportDir=build/reports/tests/test, reportFiles=index.html, reportName=HTML Report})
            Jenkinsfile.stage(➕ Quality - SonarQube analysis, groovy.lang.Closure)
               Jenkinsfile.environment(groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.withSonarQubeWrapper({verbose=true, skipFailure=false, skipSonarCheck=false, skipMaven=true, buildCmdParameters=-Dsonar.findbugs.allowuncompiledcode=true, isScannerHome=false, sonarExecutable=/usr/local/sonar-runner/bin/sonar-scanner, reportTaskFile=.scannerwork/report-task.txt, project=NABLA, repository=jenkins-pipeline-scripts}, groovy.lang.Closure)
            Jenkinsfile.stage(➡ Build - Docker, groovy.lang.Closure)
               Jenkinsfile.when(groovy.lang.Closure)
                  Jenkinsfile.expression(groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.tee(docker-build.log, groovy.lang.Closure)
            Jenkinsfile.stage(➕ Quality - E2E tests, groovy.lang.Closure)
               Jenkinsfile.steps(groovy.lang.Closure)
                  Jenkinsfile.script(groovy.lang.Closure)
                     Jenkinsfile.parallel({sample default maven project=groovy.lang.Closure})
                        Jenkinsfile.build({job=github.com/AlbanAndrieu/nabla-servers-bower-sample/master, propagate=false, wait=true})
                     Jenkinsfile.echo(E2E FAILURE)
                     Jenkinsfile.echo(WARNING : There was a problem with e2e job test java.lang.RuntimeException: sample default maven project - Cannot get property 'result' on null object)
         Jenkinsfile.post(groovy.lang.Closure)
            Jenkinsfile.always(groovy.lang.Closure)
               Jenkinsfile.node(any, groovy.lang.Closure)
                  Jenkinsfile.runHtmlPublishers([LogParserPublisher, AnalysisPublisher])
            Jenkinsfile.cleanup(groovy.lang.Closure)
               Jenkinsfile.wrapCleanWsOnNode({isEmailEnabled=false})
