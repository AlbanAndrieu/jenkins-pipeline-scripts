credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              description: "Stash jenkins user"
              id: "jenkins-stash"
              password: "{AQAAABAAAAAQmOEbN9vS4GT7WB4XtSY+OruB/yqizmjkxjOriQ50Jos=}"
              scope: GLOBAL
              username: "jenkins"
          - usernamePassword:
              description: "jenkins-ssh slave"
              id: "jenkins-ssh"
              password: "{AQAAABAAAAAQfX7GZPVIFGHtp1BDiOtqt4V4XVV7mO8UQlEkzb5Q9BY=}"
              scope: GLOBAL
              username: "jenkins"
          - usernamePassword:
              description: "Ansible Vault"
              id: "jenkins-ansible-vault"
              password: "{AQAAABAAAABAHUmduSLQfSNRlUWJA3XIM/T4duh5Oo/NEBMcDdPXbL6datOORihxxfHWt5CoFclcsfo8ZkFa12SPL/jpV6jUXjrcnTQKQtfRwJnSvgn8wpk=}"
              scope: GLOBAL
              username: "jenkins"
          - usernamePassword:
              description:
                "jenkins@unix slaves"
              id: "jenkins_unix_slaves"
              password: "{AQAAABAAAABAwq4rkyRto39zZoaBkmjGCC91LXlZ8qBTGPKnb9dCBX76o1lZ5ssSoX4qetkxeZC+OJUp6fVa32F2qqAvABV52Ic8g0XB02fVm4DzbTcAIHk=}"
              scope: GLOBAL
              username: "jenkins"
          - usernamePassword:
              description: "jenkins_unix_slaves_master_slave (Jenkins)"
              id: "jenkins_unix_slaves_master_slave"
              password: "{AQAAABAAAABAtAZECGKX+D7fTOKFr1lOrbxoGFzIhDUgKuWLZMMXEohsyNUZ+X2sNo6+Cpi9PRUEPcD6LseWTYocn+HxnBFXMzw4gFdRruTZ6ntIiZ8orLY=}"
              scope: GLOBAL
              username: "Jenkins"
          - string:
              description: "Migrated SonarQube authentication token"
              id: "sonar-token"
              scope: GLOBAL
              secret: "{AQAAABAAAABw2Zi5u/E0AhSJqjr8VRyPRHJz6DGf6Moni/sORZwXfQV2cwcoEychsXf/7MKlxY4QrQqCnBTb9ogCIIhSLf2u5iypRHF04y7zoDCVfXeYlmO1n3Kl1vlLbdghEaEcRldWCX1W6jZMKjmtatG3Lf1J9Yiiu/DQp80akwE0350P5Cg=}"
          - usernamePassword:
              description: "hub-docker-nabla"
              id: "hub-docker-nabla"
              password: "{AQAAABAAAAAQTw7F8q2Xc1eqM/m+kHc5y6X6tCJi1QZQADuL62MvGec=}"
              scope: GLOBAL
              username: "nabla"
          - usernamePassword:
              description: "Main jenkins user credentials"
              id: "main-jenkins"
              password: "{AQAAABAAAAAQyg0QdAufs9k2jjLZP1WxEHTcjN09nuBwgIPIowJWAjY=}"
              scope: GLOBAL
              username: "nabla.jenkins"
jenkins:
  agentProtocols:
    - "JNLP4-connect"
    - "Ping"
  authorizationStrategy: "loggedInUsersCanDoAnything"
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  disableRememberMe: false
  globalNodeProperties:
    - envVars:
        env:
          - key: "COMPOSE_HTTP_TIMEOUT"
            value: "200"
          - key: "CUSTOM_BUILD_ID"
            value: "0"
          - key: "DOCKER_CLIENT_TIMEOUT"
            value: "600"
          - key: "DOCKER_REGISTRY"
            value: "nabla-registry.albandrieu.com"
          - key: "DOCKER_REGISTRY_ACR"
            value: "nabla.azurecr.io"
          - key: "DOCKER_REGISTRY_ACR_CREDENTIAL"
            value: "nabla.azurecr.io"
          - key: "DOCKER_REGISTRY_CREDENTIAL"
            value: "devops.jenkins"
          - key: "DOCKER_REGISTRY_TMP"
            value: "nabla-registry-tmp.albandrieu.com"
          - key: "DOCKER_REGISTRY_TMP_CREDENTIAL"
            value: "devops.jenkins"
          - key: "SONAR_USER_HOME"
            value: ".sonar"
  labelAtoms:
    - name: "ansible"
    - name: "any"
    - name: "docker-compose"
    - name: "java"
    - name: "master"
    - name: "molecule"
    - name: "ubuntu"
  labelString: "any"
  markupFormatter:
    rawHtml:
      disableSyntaxHighlighting: false
  mode: EXCLUSIVE
  myViewsTabBar: "standard"
  nodeProperties:
    - envVars:
        env:
          - key: "ARCH"
            value: "darwin"
          - key: "JAVA_HOME"
            value: "/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home"
          - key: "PATH"
            value: "/opt/local/bin:/usr/local/opt/gnu-getopt/bin:/usr/local/opt/llvm/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
  numExecutors: 1
  primaryView:
    all:
      name: "all"
  projectNamingStrategy: "standard"
  quietPeriod: 5
  remotingSecurity:
    enabled: false
  scmCheckoutRetryCount: 0
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
        - id: "admin"
          name: "Alban Andrieu"
          properties:
            - favoriting:
                autofavoriteEnabled: true
            - preferredProvider:
                providerId: "default"
            - userConfiguration:
                displayForReadOnlyPermission: true
            - mailer:
                emailAddress: "alban.andrieu@free.fr"
  slaveAgentPort: 0
  systemMessage: "Jenkins UAT"
  updateCenter:
    sites:
      - id: "default"
        url: "http://updates.jenkins-ci.org/stable/update-center.json"
  views:
    - all:
        name: "all"
  viewsTabBar: "standard"
security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  envInject:
    enableLoadingFromMaster: false
    enablePermissions: false
    hideInjectedVars: false
  globalJobDslSecurityConfiguration:
    useScriptSecurity: true
  sSHD:
    port: 222
  scriptApproval:
    approvedSignatures:
      - "field jenkins.model.Jenkins servletContext"
      - "method groovy.json.JsonSlurper parse java.io.Reader"
      - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
      - "method groovy.lang.GString getBytes"
      - "method groovy.lang.GroovyObject getProperty java.lang.String"
      - "method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object"
      - "method hudson.model.Actionable getActions"
      - "method hudson.model.Cause getShortDescription"
      - "method hudson.model.Cause$UserIdCause getUserId"
      - "method hudson.model.Computer getNode"
      - "method hudson.model.Executor getOwner"
      - "method hudson.model.Executor interrupt hudson.model.Result jenkins.model.CauseOfInterruption[]"
      - "method hudson.model.ItemGroup getItem java.lang.String"
      - "method hudson.model.Job getBuilds"
      - "method hudson.model.Label getNodes"
      - "method hudson.model.Node getNodeName"
      - "method hudson.model.Run getCause java.lang.Class"
      - "method hudson.model.Run getExecutor"
      - "method hudson.model.Run getLogFile"
      - "method hudson.model.Run getNumber"
      - "method hudson.model.Saveable save"
      - "method hudson.plugins.git.GitSCM getBranches"
      - "method hudson.plugins.git.GitSCM getUserRemoteConfigs"
      - "method hudson.plugins.git.GitSCM isDoGenerateSubmoduleConfigurations"
      - "method hudson.plugins.git.GitSCMBackwardCompatibility getExtensions"
      - "method hudson.plugins.git.UserRemoteConfig getUrl"
      - "method hudson.slaves.EnvironmentVariablesNodeProperty getEnvVars"
      - "method hudson.util.PersistedList getAll java.lang.Class"
      - "method java.io.BufferedReader readLine"
      - "method java.lang.Class isArray"
      - "method java.lang.String concat java.lang.String"
      - "method java.lang.Throwable getStackTrace"
      - "method java.net.HttpURLConnection getErrorStream"
      - "method java.net.HttpURLConnection getResponseCode"
      - "method java.net.HttpURLConnection setRequestMethod java.lang.String"
      - "method java.net.URL openConnection"
      - "method java.net.URLConnection connect"
      - "method java.net.URLConnection getInputStream"
      - "method java.net.URLConnection getURL"
      - "method java.net.URLConnection setRequestProperty java.lang.String java.lang.String"
      - "method javax.servlet.ServletContext getContextPath"
      - "method jenkins.model.Jenkins getGlobalNodeProperties"
      - "method jenkins.model.Jenkins getLabel java.lang.String"
      - "method jenkins.model.Jenkins getRootUrl"
      - "method org.jenkinsci.plugins.workflow.steps.FlowInterruptedException getCauses"
      - "method org.jenkinsci.plugins.workflow.support.actions.EnvironmentAction getEnvironment"
      - "method org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper getRawBuild"
      - "method org.jenkinsci.plugins.workflow.support.steps.input.Rejection getUser"
      - "method org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder$BadgeManager\
        \ createSummary java.lang.String"
      - "method org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder$BadgeManager\
        \ getBuild"
      - "method org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder$BadgeManager\
        \ removeSummaries"
      - "method org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder$BadgeManager\
        \ setBuildNumber int"
      - "new groovy.json.JsonSlurperClassic"
      - "new java.io.BufferedReader java.io.Reader"
      - "new java.io.File java.lang.String"
      - "new java.io.InputStreamReader java.io.InputStream"
      - "new java.lang.StringBuffer"
      - "new jenkins.model.CauseOfInterruption$UserInterruption java.lang.String"
      - "staticField java.net.HttpURLConnection HTTP_BAD_REQUEST"
      - "staticMethod hudson.console.ModelHyperlinkNote encodeTo java.lang.String java.lang.String"
      - "staticMethod hudson.model.Hudson getInstance"
      - "staticMethod java.lang.String valueOf char[]"
      - "staticMethod java.lang.Thread currentThread"
      - "staticMethod jenkins.model.Jenkins getInstance"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods eachLine java.io.File\
        \ groovy.lang.Closure"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getAt java.lang.Object\
        \ java.lang.String"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getProperties\
        \ java.lang.Object"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.net.URL"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods invokeMethod\
        \ java.lang.Object java.lang.String java.lang.Object"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods println java.lang.Object\
        \ java.lang.Object"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods toBoolean java.lang.Boolean"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods write java.io.File\
        \ java.lang.String"
      - "staticMethod org.codehaus.groovy.runtime.EncodingGroovyMethods encodeBase64\
        \ byte[]"
unclassified:
  ansiColorBuildWrapper:
    colorMaps:
      - black: "#000000"
        blackB: "#4C4C4C"
        blue: "#1E90FF"
        blueB: "#4682B4"
        cyan: "#00CDCD"
        cyanB: "#00FFFF"
        green: "#00CD00"
        greenB: "#00FF00"
        magenta: "#CD00CD"
        magentaB: "#FF00FF"
        name: "xterm"
        red: "#CD0000"
        redB: "#FF0000"
        white: "#E5E5E5"
        whiteB: "#FFFFFF"
        yellow: "#CDCD00"
        yellowB: "#FFFF00"
      - black: "#000000"
        blackB: "#555555"
        blue: "#0000AA"
        blueB: "#5555FF"
        cyan: "#00AAAA"
        cyanB: "#55FFFF"
        defaultBackground: 0
        defaultForeground: 7
        green: "#00AA00"
        greenB: "#55FF55"
        magenta: "#AA00AA"
        magentaB: "#FF55FF"
        name: "vga"
        red: "#AA0000"
        redB: "#FF5555"
        white: "#AAAAAA"
        whiteB: "#FFFFFF"
        yellow: "#AA5500"
        yellowB: "#FFFF55"
      - black: "black"
        blackB: "black"
        blue: "blue"
        blueB: "blue"
        cyan: "cyan"
        cyanB: "cyan"
        green: "green"
        greenB: "green"
        magenta: "magenta"
        magentaB: "magenta"
        name: "css"
        red: "red"
        redB: "red"
        white: "white"
        whiteB: "white"
        yellow: "yellow"
        yellowB: "yellow"
      - black: "#2E3436"
        blackB: "#2E3436"
        blue: "#3465A4"
        blueB: "#3465A4"
        cyan: "#06989A"
        cyanB: "#06989A"
        defaultBackground: 0
        defaultForeground: 7
        green: "#4E9A06"
        greenB: "#4E9A06"
        magenta: "#75507B"
        magentaB: "#75507B"
        name: "gnome-terminal"
        red: "#CC0000"
        redB: "#CC0000"
        white: "#D3D7CF"
        whiteB: "#D3D7CF"
        yellow: "#C4A000"
        yellowB: "#C4A000"
  badgePlugin:
    disableFormatHTML: false
  buildDiscarders:
    configuredBuildDiscarders:
      - "jobBuildDiscarder"
  buildFailureAnalyzer:
    doNotAnalyzeAbortedJob: false
    gerritTriggerEnabled: true
    globalEnabled: false
    graphsEnabled: false
    knowledgeBase: "localFile"
    maxLogSize: 0
    noCausesEnabled: true
    noCausesMessage:
      "No problems were identified. If you know why this problem occurred,\
      \ please add a suitable Cause for it."
    nrOfScanThreads: 3
    slackFailureCategories: "ALL"
    slackNotifEnabled: false
    testResultParsingEnabled: false
  buildStepOperation:
    enabled: false
  buildTimestamp:
    enableBuildTimestamp: true
    pattern: "yyyyMMdd'T'HHmmss"
    timezone: "Europe/Paris"
  chosenViewsTabbarGlobalConfiguration:
    shortcutToFocusChosen: "F2"
  claimConfig:
    blockAutoRefreshWhileClaiming: false
    propagateToFollowingBuildsByDefault: false
    sendEmails: false
    sendEmailsForStickyFailures: false
    sortUsersByFullName: false
    stickyByDefault: true
  cxScanBuilder:
    asyncHtmlRemoval: false
    credentialsId: "nabla.jenkins.checkmarx"
    enableCertificateValidation: true
    excludeFolders:
      ".repository, target, .node_cache, .node_tmp, .grunt, .bower,\
      \ bower_components, node_modules, node, lib, libs, docs, help, test,  Sample,\
      \ vendors, dist, build"
    filterPattern: |-
      !**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*,
      !**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr,     !**/*.iws,
      !**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
      !**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
      !**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
      !**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
      !**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
      !**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
      !**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
      !**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
      !**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*
    forcingVulnerabilityThresholdEnabled: false
    hideDebugLogs: false
    hideResults: false
    isProxy: true
    jobGlobalStatusOnError: FAILURE
    jobGlobalStatusOnThresholdViolation: FAILURE
    lockVulnerabilitySettings: true
    password: "{AQAAABAAAABAUjsCoXTLDmpYJ6+WcOLvvuTe4eFBlvE3mTYBLRyK8agyHVzMahyhL8wuHS3SveUjSy14RA88T2xm1Ixritl5nFsz+doiqDFU1Jv06o0dzWk=}"
    prohibitProjectCreation: false
    scanTimeOutEnabled: true
    scanTimeoutDuration: 60
    serverUrl: "https://checkmarx.albandrieu.com"
    username: "nabla.jenkins"
  defaultFolderConfiguration:
    healthMetrics:
      - worstChildHealthMetric:
          recursive: true
  dependencyTrackPublisher:
    dependencyTrackAutoCreateProjects: false
    dependencyTrackConnectionTimeout: 0
    dependencyTrackPollingInterval: 10
    dependencyTrackPollingTimeout: 5
    dependencyTrackReadTimeout: 0
  descriptionSetterWrapper:
    charset: "UTF-8"
    disableTokens: false
  gitHubConfiguration:
    apiRateLimitChecker: ThrottleForNormalize
  gitHubPluginConfig:
    hookUrl: "https://10.152.183.194:8686/github-webhook/"
  gitSCM:
    addGitTagAction: false
    allowSecondFetch: false
    createAccountBasedOnEmail: false
    disableGitToolChooser: false
    globalConfigEmail: "alban.andrieu@free.fr"
    globalConfigName: "Andrieu, Alban"
    hideCredentials: false
    showEntireCommitSummaryInChanges: false
    useExistingAccountWithSameEmail: false
  githubPullRequests:
    actualiseOnFactory: false
  globalConfigFiles:
    configs:
      - custom:
          comment: "JPL bowerrc configuration - Used only with isLocalJenkinsUser: true"
          content: |-
            {
              "directory": "bower_components",
              "proxy": "http://192.168.1.57:3128",
              "https-proxy": "http://192.168.1.57:3128",
              "no-proxy": "localhost,127.0.0.1,.albandrieu.com",
              "analytics": false,
              "timeout": 120000,
              "registry": "http://192.168.1.57:5678",
              "register": "http://192.168.1.57:5678",
              "publish": "http://192.168.1.57:5678",
              "storage": {
                "packages" : ".bower/packages",
                "registry" : ".bower/registry"
              },
              "tmp": ".bower/tmp",
              "allow_root": true
            }
          id: "nabla-bowerrc-default"
          name: "nabla-bowerrc-default"
          providerId: "org.jenkinsci.plugins.configfiles.custom.CustomConfig"
  globalConfigurationImpl:
    allResults: true
    enabled: true
    notificationTimeout: 15000
    queryTimeout: 30
  globalDefaultFlowDurabilityLevel:
    durabilityHint: PERFORMANCE_OPTIMIZED
  globalEventsPlugin:
    disableSynchronization: false
    onEventGroovyCode:
      "import groovy.json.*\nimport hudson.model.Hudson.*\nimport\
      \ jenkins.model.*\nimport java.lang.management.RuntimeMXBean\nimport java.lang.management.ManagementFactory\n\
      import hudson.model.*\nimport jenkins.metrics.impl.TimeInQueueAction\n\n//@Grab('org.jenkins-ci.plugins.workflow:workflow-job:2.37')\n\
      import org.jenkinsci.plugins.workflow.job.WorkflowRun\nimport org.jenkinsci.plugins.workflow.flow.FlowExecution;\n\
      import org.jenkinsci.plugins.workflow.graph.FlowGraphWalker;\nimport org.jenkinsci.plugins.workflow.graph.FlowNode;\n\
      //import org.jenkinsci.plugins.workflow.graph.StepStartNode;\nimport org.jenkinsci.plugins.workflow.cps.nodes.StepStartNode;\n\
      import org.jenkinsci.plugins.workflow.actions.WorkspaceAction\n\nlog.info(\"\
      Fired event '^${event}'.\")\n\n//import java.util.Base64 // requires java8\n\
      //auth = \"Basic \" + Base64.getEncoder().encodeToString(\"elastic:changeme\"\
      .getBytes()) // if no java8, compute basicAuth externally and hardcode it here\n\
      auth = null\nnexusUrl = 'http://localhost/jenkins-events-listener/regex.json'\n\
      esUrl = 'http://monitoring_elasticsearch:9200'\njenkinsIndex = 'new.jenkins-'+\
      \ new Date().format('yyyyMM')\ntimeout = 5 //seconds\n\nnow = System.currentTimeMillis()\
      \ // ms since epoch\ninstance = Jenkins.instance\n\nlog.info(Event.JOB_FINALIZED)\n\
      \nif (event == Event.JOB_FINALIZED) {\n    if (run.getParent() instanceof hudson.maven.MavenModule)\
      \ {\n        return\n    }\n    def nodeStatistics = nodeStatistics()\n    def\
      \ getJVMMemoryUsage = getJVMMemoryUsage()\n    def doc = [\n        '@timestamp'\
      \        : now,\n        'buildScheduleTime' : run.getTimeInMillis(),      \
      \                     // ms since epoch\n        'buildStartTime'    : run.getStartTimeInMillis(),\
      \                      // ms since epoch\n        'buildDuration'     : run.getDuration(),\
      \                               // ms\n        'buildTimeInQueue'  : run.getStartTimeInMillis()-run.getTimeInMillis(),//\
      \ ms\n        'jobName'           : env.JOB_NAME,\n        'buildResult'   \
      \    : run.getResult().toString(),\n        'buildResultValue'  : mapResultToValue()[run.getResult().toString()],\n\
      \        'jenkinsMaster'     : getJenkinsMasterName(),\n        'jenkinsMasterUrl'\
      \  : jenkins.getRootUrl(),\n        'buildId'           : env.BUILD_NUMBER,\
      \                                //run.getNumber()\n        'buildUrl'     \
      \     : env.BUILD_URL,                                   // run.getUrl() (relative\
      \ url)\n        'buildNode'         : getBuildNodes(),\n        'jobType'  \
      \         : run.getParent().class.toString().minus(~/.*\\.|class /),\n     \
      \   'queueNumber'       : jenkins.queue.items.length,\n        'nodesNumber'\
      \       : nodeStatistics['nodesNumber'],\n        'numberNodesOffline': nodeStatistics['numberNodesOffline'],\n\
      \        'numberNodesOnline' : nodeStatistics['numberNodesOnline'],\n      \t\
      'busyExecutors'\t\t: nodeStatistics['busyExecutors'],\n      \t'idleExecutors'\t\
      \t: nodeStatistics['idleExecutors'],\n        'totalExecutors'    : nodeStatistics['totalExecutors'],\n\
      \        'runnigJobNumber'   : numberOfRunnigJobs(),\n      \t'jvmTotalMemory'\t\
      : getJVMMemoryUsage['totalMemory'],\n      \t'jvmMaxMemory'\t\t: getJVMMemoryUsage['maxMemory'],\n\
      \      \t'jvmFreeMemory'\t\t: getJVMMemoryUsage['freeMemory'],\n      \t'jenkinsMasterHostname'\
      \ : InetAddress.getLocalHost().getHostName(),\n    ]\n//Junit Results\n   if\
      \ (run.getActions(hudson.tasks.junit.TestResultAction.class)) {\n        def\
      \ junit = run.getAction(hudson.tasks.junit.TestResultAction.class)\n       \
      \ doc += junitCount(junit)\n    }\n    if (run.getActions(hudson.tasks.test.AggregatedTestResultPublisher.TestResultAction.class))\
      \ {\n        def junit = run.getAction(hudson.tasks.test.AggregatedTestResultPublisher.TestResultAction.class)\n\
      \        doc += junitCount(junit)\n    }\n\n    if (run.getActions(hudson.maven.reporters.SurefireAggregatedReport)){\n\
      \        def junit = run.getAction(hudson.maven.reporters.SurefireAggregatedReport.class)\n\
      \        doc += junitCount(junit)\n    }\n\n//Robot Framework Results\n    if\
      \ (run.getAction(hudson.plugins.robot.RobotBuildAction.class)) {\n        def\
      \ robotClass = run.getAction(hudson.plugins.robot.RobotBuildAction.class)\n\
      \        def robotResults = robotClass.result\n        doc += [\n          \
      \  'robotOverallTotal': robotResults.overallTotal,\n            'robotOverallPassed':\
      \ robotResults.overallPassed,\n            'robotOverallFailed': robotResults.overallFailed,\n\
      \            'robotPassPercentage': robotClass.overallPassPercentage,\n    \
      \        'robotCriticalTotal': robotResults.criticalTotal,\n            'robotCriticalPassed':\
      \ robotResults.criticalPassed,\n            'robotCriticalFailed': robotResults.criticalFailed\
      \ ,\n            'robotCriticalPassPercentage': robotClass.criticalPassPercentage,\n\
      \        ]\n    }\n\n    def getChangeSets = run.getChangeSets()\n\n\n    if\
      \ (env.containsKey('GIT_URL')) {\n        doc += [\n            'gitUrl': env.GIT_URL,\n\
      \            'gitBranch': env.GIT_BRANCH,\n            'gitCommit': env.GIT_COMMIT,\n\
      \          ]\n        if(env.GIT_AUTHOR_EMAIL) {\n            doc += [\n   \
      \             'gitAuthorEmailString': env.GIT_AUTHOR_EMAIL.toString(),\n   \
      \         ]\n        }\n    }\n\n    if (run.getResult().toString() != 'SUCCESS')\
      \ {\n        def regex = ''\n        try {\n            regex = jsonParse(getDataFromURL(nexusUrl)).join('|')\n\
      \        }\n        catch (err) {\n            println \"[WARN][NEXUS] returned:\
      \ ^${err}\"\n            regex = ['java.nio.file.FileAlreadyExistsException:(.*)workspace',\n\
      \                    'Cannot contact(.*): java.lang.InterruptedException',\n\
      \                    'java.nio.file.FileSystemException:(.*)Input/output error',\n\
      \                    'java.io.IOException: Failed to mkdirs:',\n           \
      \         'process apparently never started in',\n                    'Agent\
      \ went offline',\n                    'Process table full',\n              \
      \      'JENKINS-(.*)if on an extremely laggy filesystem',\n                \
      \    'Cannot open session, connection is not authenticated'].join('|')\n   \
      \     }\n        def errorsFromLog = []\n        def tailLog = run.getLog(1000)\n\
      \        if (tailLog.size() > 0) {\n            for (int x = 0; x < tailLog.size();\
      \ x++) {\n                if (tailLog[x] =~ /(^${regex})/) {\n             \
      \       errorsFromLog.add(tailLog[x])\n                }\n            }\n  \
      \      }\n        if (errorsFromLog.size() > 0) {\n            doc += [\n  \
      \              errors: errorsFromLog.unique()\n            ]\n        }\n  \
      \  }\n\n    else if (env.containsKey('SVN_URL')) {\n        doc += [\n     \
      \       svnUrl: env.SVN_URL,\n            svnRevision: env.SVN_REVISION\n  \
      \        ]\n    }\n  \t// Number of data pushed to Elastic is to big\n    if(conditionForPushing())\
      \ {\n        queueStatistics()\n    }\n    insertElasticDoc(\"buildResult\"\
      , doc, auth)\n}\nelse if (event == Event.PLUGIN_SCHEDULE) {\n    if(conditionForPushing())\
      \ {\n        queueStatistics()\n    }\n}\n\ndef getJenkinsMasterName() {\n \
      \   return jenkins.getRootUrl().minus(~/.*\\/\\//).minus(~/[\\.:].*/) // or\
      \ env.JENKINS_URL, but not declared in schedule events\n}\n\ndef getBuildNodes()\
      \ {\n    if(run instanceof WorkflowRun) {\n        nodeList = []\n        exec\
      \ = run.getExecution();\n        if(exec != null) {\n            for (FlowNode\
      \ n : new FlowGraphWalker(exec)) {\n                if (n instanceof StepStartNode)\
      \ {\n                    node = null\n                    action = n.getAction(WorkspaceAction);\n\
      \                    if(action) {\n                        node = action.getNode().toString();\n\
      \                    }\n                    if (node) {\n                  \
      \      nodeList += node\n                    }\n                }\n        \
      \    }\n        }\n        return nodeList.unique()\n    } else {\n        //\
      \ run.getExecutor().getOwner().getName() ?: run.getExecutor().getOwner().getHostName()\
      \ // name or IP if no name\n        return env.NODE_NAME\n    }\n}\n\ndef sendElasticRequest(apiCmd,\
      \ text, contentType, auth=null, timeout=5) {\n    def conn = new URL(\"^${esUrl}/^${jenkinsIndex}/^${apiCmd}\"\
      ).openConnection()\n    if (auth) {\n        conn.setRequestProperty (\"Authorization\"\
      , auth)\n    }\n    conn.setConnectTimeout(1000*timeout)\n    conn.setReadTimeout(1000*timeout)\n\
      \    conn.setRequestMethod(\"POST\")\n    conn.setDoOutput(true)\n    conn.setRequestProperty(\"\
      Content-Type\", contentType)\n    conn.getOutputStream().write(text.getBytes(\"\
      UTF-8\"))\n    def postRC = conn.getResponseCode()\n    if (postRC<200 || postRC>299)\
      \ {\n        println \"[WARN][ELASTIC] Request {$apiCmd}\"\n        println\
      \ text.replaceAll(\"(?m)^\", \"[WARN][ELASTIC]     \").trim()\n        println\
      \ \"[WARN][ELASTIC] returned ^${postRC} : \" + conn.getInputStream().getText()\n\
      \    }\n}\n\ndef insertElasticDoc(type, doc, auth=nuFworll, timeout=5) {\n \
      \   sendElasticRequest(\"^${type}\", JsonOutput.toJson(doc), \"application/json\"\
      , auth, timeout)\n}\n\n// docDatas is a list of [docType: doc]\ndef insertElasticDocs(docDatas,\
      \ auth=null, timeout=5) {\n    if (docDatas) {\n        def text = \"\"\n  \
      \      docDatas.each{ docData -> docData.each{ docType, doc -> text += JsonOutput.toJson([\"\
      index\": [\"_type\": docType]])+\"\\n\"+JsonOutput.toJson(doc)+\"\\n\" } }\n\
      \        sendElasticRequest(\"_bulk\", text, \"application/x-ndjson\", auth,\
      \ timeout)\n    }\n}\n\ndef getDataFromURL(def url, def timeout=5) {\n    def\
      \ data = ''\n    def conn = new URL(url).openConnection()\n    conn.setConnectTimeout(1000*timeout)\n\
      \    conn.setReadTimeout(1000*timeout)\n    conn.setRequestMethod(\"GET\")\n\
      \    def connRC = conn.getResponseCode()\n    if(connRC.equals(200)) {\n   \
      \     data = conn.getInputStream().getText()\n    }\n    return data\n}\n\n\
      def jsonParse(def json) {\n    return new groovy.json.JsonSlurperClassic().parseText(json)\n\
      }\n\ndef nodeStatistics() {\n    final jenkins = instance\n    def nodeStatistics\
      \ = [:]\n    int nodesNumber = 0\n    int numberNodesOnline = 0\n    int numberNodesOffline\
      \ = 0\n    for (def computer in jenkins.computers) {\n        if (computer.isOffline())\
      \ {\n            numberNodesOffline++\n        }\n        else {\n         \
      \   numberNodesOnline++\n        }\n        nodesNumber++\n    }\n    def getInstance\
      \ = Jenkins.getInstance()\n  \tif (getInstance != null) {\n        nodeStatistics['totalExecutors']\
      \ = getInstance.getComputer().getTotalExecutors()\n        nodeStatistics['nodesNumber']\
      \ = nodesNumber\n        nodeStatistics['numberNodesOffline'] = numberNodesOffline\n\
      \        nodeStatistics['numberNodesOnline'] = numberNodesOnline\n        nodeStatistics['busyExecutors']\
      \ = getInstance.getComputer().getBusyExecutors()\n        nodeStatistics['idleExecutors']\
      \ = getInstance.getComputer().getIdleExecutors()\n    }\n    return nodeStatistics\n\
      }\n\ndef queueStatistics() {\n  \tdef queue = jenkins.model.Jenkins.getInstance().getQueue().getItems()\n\
      \  \tdef jobQueueUrl = []\n  \tqueue.each{\n      \tjobQueueUrl.add(it.task.getUrl())\n\
      \        def docs = [\n          \t\t'@timestamp'        : now,\n          \
      \      'buildResult'       : 'inQueue',\n                'jenkinsMaster'   \
      \  : getJenkinsMasterName(),\n                'inQueue' \t\t    : (now - it.getInQueueSince()),\n\
      \                'jobQueueUrl' \t    : it.task.getUrl(),\n                'jenkinsMasterUrl'\
      \  : jenkins.getRootUrl(),\n        ]\n     \tif (docs.size() > 0) {\n  \t\t\
      \tinsertElasticDoc('buildResult', docs, auth, 5)\n  \t\t}\n    }\n    runningJobs(jobQueueUrl)\n\
      }\n\ndef runningJobs(def jobUrl) {\n  def buildingJobs = instance.getAllItems(hudson.model.Job.class).findAll\
      \ { hudson.model.Job job -> job.isBuilding() }\n  buildingJobs.each { hudson.model.Job\
      \ job  ->\n    job.builds.findAll { hudson.model.Run run ->\n      if (run.isBuilding()\
      \ &&  (!jobUrl.contains(run.getUrl()))) {\n         def docs = [\n         \
      \   '@timestamp'    \t: now,\n            'jenkinsMaster' \t: getJenkinsMasterName(),\n\
      \            'jobDuration'    \t: (now - run.getStartTimeInMillis()),\n    \
      \        'buildStatus'\t\t: 'IN_PROGRESS',\n            'jobBuildingUrl'   \
      \ : run.getUrl(),\n            'jenkinsMasterUrl'  : jenkins.getRootUrl(),\n\
      \            ]\n        if (docs.size() > 0) {\n  \t\t\tinsertElasticDoc('buildResult',\
      \ docs, auth, 5)\n  \t\t}\n      }\n    }\n  }\n}\n\ndef getJVMMemoryUsage()\
      \ {\n  \tdef jvmMemoryUsage = [:]\n\tRuntime runtime = Runtime.getRuntime()\n\
      \  \tjvmMemoryUsage['freeMemory'] \t= runtime.freeMemory()\n  \tjvmMemoryUsage['totalMemory']\
      \ \t= runtime.totalMemory()\n  \tjvmMemoryUsage['maxMemory'] \t= runtime.maxMemory()\n\
      \n  return jvmMemoryUsage\n}\n\ndef numberOfRunnigJobs() {\n    int countOngoingBuilds\
      \ = (instance.getAllItems(hudson.model.Job.class).findAll { it.isBuilding()}).size()\n\
      \    if (countOngoingBuilds > 0) {\n        return countOngoingBuilds\n    }\n\
      \    return 0\n}\n                            // 3 minutes\ndef conditionForPushing(def\
      \ delay=180000) {\n    context.timeStamp = context.timeStamp ?: 0\n    if ((now\
      \ - context.timeStamp) > delay) {\n        context.timeStamp = now\n       \
      \ return true\n    }\n    return false\n}\n\ndef mapResultToValue() {\n    def\
      \ resultToValue = [:]\n    resultToValue['SUCCESS'] = 10\n    resultToValue['UNSTABLE']\
      \ = 20\n    resultToValue['ABORTED'] = 30\n    resultToValue['NOT_BUILT'] =\
      \ 40\n    resultToValue['FAILURE'] = 50\n\n    return resultToValue\n}\n\ndef\
      \ junitCount(def junit) {\n    float junitFailCount = junit.getFailCount() ?:\
      \ 0\n    float junitTotalCount = junit.getTotalCount() ?: 0\n    float junitSkipCount\
      \ = junit.getSkipCount() ?: 0\n    float junitPassCount = (junitTotalCount -\
      \ junitSkipCount - junitFailCount)\n    float junitFailPercent = (junitFailCount\
      \ / junitTotalCount)\n    float junitSkipPercent = (junitSkipCount / junitTotalCount)\n\
      \    float junitPassPercent = (junitPassCount / junitTotalCount)\n\n    def\
      \ docs = [\n        'junitFailCount': junitFailCount,\n        'junitTotalCount':\
      \ junitTotalCount,\n        'junitSkipCount': junitSkipCount,\n        'junitPassCount':\
      \ junitPassCount,\n        'junitFailPercent': junitFailPercent,\n        'junitSkipPercent':\
      \ junitSkipPercent,\n        'junitPassPercent': junitPassPercent\n    ]\n\n\
      \    return docs\n}\n"
  globalLibraries:
    libraries:
      - defaultVersion: "develop"
        name: "jenkins-pipeline-scripts"
        retriever:
          modernSCM:
            scm:
              git:
                credentialsId: "devops.jenkins-ssh"
                id: "f574f66c-ef3c-46e6-97ec-d992710beefc"
                remote: "ssh://git@github.com:AlbanAndrieu/jenkins-pipeline-scripts.git"
  groovy:
    installations:
      - name: "groovy-2.4.4"
        properties:
          - installSource:
              installers:
                - groovyInstaller:
                    id: "2.4.4"
      - name: "groovy-2.4.12"
        properties:
          - installSource:
              installers:
                - groovyInstaller:
                    id: "3.0.8"
  ivyBuildTrigger:
    extendedVersionMatching: false
  jenkinsLintGlobalConfiguration:
    artifactCheckerEnabled: true
    bfaCheckerEnabled: true
    cleanupWorkspaceCheckerEnabled: true
    gitRefCheckerEnabled: true
    gitRefSubmoduleCheckerEnabled: true
    gitShallowCheckerEnabled: true
    globalEnabled: true
    gradleWrapperCheckerEnabled: true
    groovySystemExitCheckerEnabled: true
    hardcodedScriptCheckerEnabled: true
    hardcodedScriptIgnoredComment: false
    hardcodedScriptThreshold: 2
    javadocCheckerEnabled: true
    jobActionEnabled: true
    jobAssignedLabelCheckerEnabled: true
    jobDescriptionCheckerEnabled: true
    jobLogRotatorCheckerEnabled: true
    jobNameCheckerEnabled: true
    lintDisabledJobEnabled: true
    masterLabelCheckerEnabled: true
    mavenJobTypeCheckerEnabled: true
    multibranchJobTypeCheckerEnabled: true
    nullSCMCheckerEnabled: true
    pollingSCMTriggerCheckerEnabled: true
    slaveDescriptionCheckerEnabled: true
    slaveLabelCheckerEnabled: true
    slaveVersionCheckerEnabled: true
    timeoutCheckerEnabled: true
    timerTriggerCheckerEnabled: true
    windowsSlaveLaunchCheckerEnabled: true
  jiraGlobalConfiguration:
    sites:
      - alternativeUrl: "http://jira.albandrieu.com/"
        credentialsId: "devops.jenkins"
        readTimeout: 10
        timeout: 30
        url: "http://jira.albandrieu.com/"
  jobImportGlobalConfig:
    sites:
      - name: "other-jenkins"
        url: "https://other-jenkins.albandrieu.com/jenkins"
  junitTestResultStorage:
    storage: "file"
  location:
    adminAddress: "Adresse pas encore configurée <nobody@nowhere>"
    url: "https://albandrieu:8686/jenkins/"
  lockableResourcesManager:
    declaredResources:
      - name: "lock_CPP_master-slave"
  logParser:
    legacyFormatting: false
    parsingRulesGlobal:
      - name: "deploy log parsing"
        path: "/jenkins/deploy-log_parsing_rules"
  mailer:
    charset: "UTF-8"
    defaultSuffix: "@free.fr"
    replyToAddress: "todo-noreply@free.fr"
    smtpHost: "smtp.free.fr"
    useSsl: false
    useTls: false
  mavenModuleSet:
    localRepository: "perExecutor"
  naginatorPublisher:
    regexpTimeoutMs: 30000
  notifyBitbucket:
    considerUnstableAsSuccess: false
    credentialsId: "devops.jenkins"
    disableInprogressNotification: false
    ignoreUnverifiedSsl: false
    includeBuildNumberInKey: false
    prependParentProjectKey: false
    stashRootUrl: "https://bitbucket.albandrieu.com/"
  pollSCM:
    pollingThreadCount: 10
  prometheusConfiguration:
    appendParamLabel: false
    appendStatusLabel: false
    collectDiskUsage: true
    collectingMetricsPeriodInSeconds: 120
    countAbortedBuilds: true
    countFailedBuilds: true
    countNotBuiltBuilds: true
    countSuccessfulBuilds: true
    countUnstableBuilds: true
    defaultNamespace: "default"
    fetchTestResults: true
    jobAttributeName: "jenkins_job"
    path: "prometheus"
    processingDisabledBuilds: false
    useAuthenticatedEndpoint: false
  remoteBuildConfiguration:
    remoteSites:
      - address: "https://other-ci.albandrieu.com/jenkins"
        auth2:
          CredentialsAuth:
            credentials: "devops.jenkins"
        displayName: "other-ci"
  robotConfig:
    buildsToShowInResultsColumn: 15
    robotResultsColumnEnabled: true
    xAxisLabelFormat: "#$build"
  sshPublisher:
    commonConfig:
      disableAllExec: false
      encryptedPassphrase: "{AQAAABAAAABABZEoK4VuAcyH1okfm1gejd7LSUCEF50sts6BqDRwmiw07o7t5AyOxlwlbfvWO9jJ7zNWHReIo5Zyepk9tyjB+fO9edYP0d8jRl6ZVUAlxus=}"
  subversionSCM:
    workspaceFormat: 10
  timestamper:
    allPipelines: false
    elapsedTimeFormat: "'<b>'HH:mm:ss.S'</b> '"
    systemTimeFormat: "'<b>'HH:mm:ss'</b> '"
tool:
  ant:
    installations:
      - name: "ant-latest"
        properties:
          - installSource:
              installers:
                - antFromApache:
                    id: "1.10.1"
  customTool:
    installations:
      - name: "ZAPROXY"
        properties:
          - installSource:
              installers:
                - zip:
                    subdir: "ZAP_2.5.0"
                    url: "https://github.com/zaproxy/zaproxy/releases/download/2.5.0/ZAP_2.5.0_Core.tar.gz"
      - name: "ZAPROXY_2.8.0"
        properties:
          - installSource:
              installers:
                - zip:
                    label: "zaproxy"
                    subdir: "ZAP_2.8.0"
                    url: "http://fr1cslfrbm0059/download/zap/ZAP_2.8.0_Core.zip"
      - name: "ZAPROXY_2.10.0"
        properties:
          - installSource:
              installers:
                - zip:
                    label: "zaproxy"
                    subdir: "ZAP_2.10.0"
                    url: "https://github.com/zaproxy/zaproxy/releases/download/v2.10.0/ZAP_2.10.0_Crossplatform.zip"
  git:
    installations:
      - home: "/usr/bin/git"
        name: "git-latest"
  groovy:
    installations:
      - name: "groovy-2.4.4"
        properties:
          - installSource:
              installers:
                - groovyInstaller:
                    id: "2.4.4"
      - name: "groovy-2.4.12"
        properties:
          - installSource:
              installers:
                - groovyInstaller:
                    id: "3.0.8"
  jdk:
    installations:
      - name: "java-latest"
        properties:
          - installSource:
              installers:
                - jdkInstaller:
                    acceptLicense: true
                    id: "jdk-8u131-oth-JPR"
      - name: "java-7-latest"
        properties:
          - installSource:
              installers:
                - jdkInstaller:
                    acceptLicense: true
                    id: "jdk-7u80-oth-JPR"
      - name: "jdk8"
        properties:
          - installSource:
              installers:
                - jdkInstaller:
                    acceptLicense: true
                    id: "jdk-8u131-oth-JPR"
      - name: "openjdk8"
      - name: "jdk-18"
        properties:
          - installSource:
              installers:
                - jdkInstaller:
                    acceptLicense: true
                    id: "jdk-8u131-oth-JPR"
  maven:
    installations:
      - name: "maven-3.5.0"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.5.0"
  mavenGlobalConfig:
    globalSettingsProvider:
      mvn:
        settingsConfigId: "nabla-maven-default"
    settingsProvider:
      mvn:
        settingsConfigId: "nabla-maven-local-default"
  pipelineMaven:
    publisherOptions:
      - "pipelineGraphPublisher"
    triggerDownstreamUponResultAborted: false
    triggerDownstreamUponResultFailure: false
    triggerDownstreamUponResultNotBuilt: false
    triggerDownstreamUponResultSuccess: true
    triggerDownstreamUponResultUnstable: false
  sConsInstallation:
    installations:
      - home: "/usr/local/bin/scons"
        name: "scons-latest"
  sonarRunnerInstallation:
    installations:
      - name: "Sonar-Runner-2.8"
        properties:
          - installSource:
              installers:
                - sonarRunnerInstaller:
                    id: "4.6.1.2450"
      - name: "Sonar-Scanner-4.6"
        properties:
          - installSource:
              installers:
                - sonarRunnerInstaller:
                    id: "4.6.1.2450"
  xvfbInstallation:
    installations:
      - home: "/usr/bin/"
        name: "mgr"
