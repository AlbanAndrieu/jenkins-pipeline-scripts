credentials:
  system:
    domainCredentials:
    - credentials:
      - usernamePassword:
          description: "Stash jenkins user"
          id: "stash-jenkins"
          password: "{AQAAABAAAAAQmOEbN9vS4GT7WB4XtSY+OruB/yqizmjkxjOriQ50Jos=}"
          scope: GLOBAL
          username: "mgr.jenkins"
      - string:
          description: "Migrated SonarQube authentication token"
          id: "alm-sonar2-token"
          scope: GLOBAL
          secret: "{AQAAABAAAAAw9Q3i4gnmA5U5wD2GMG8/O2dMPKy4b57C3dDzhiNJKF+ssijW987I4WBN6mGpr4O28MhEjXtbAKmMJFv8b8VM6A==}"
      - usernamePassword:
          description: "Main jenkins user credentials"
          id: "ad.jenkins-bm"
          password: "{AQAAABAAAAAQyg0QdAufs9k2jjLZP1WxEHTcjN09nuBwgIPIowJWAjY=}"
          scope: GLOBAL
          username: "mgr.jenkins"
jenkins:
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  clouds:
  - docker:
      disabled:
        disabledByChoice: true
        enabledByChoice: false
      dockerApi:
        connectTimeout: 60
        dockerHost:
          uri: "tcp://localhost:2376"
        readTimeout: 60
      name: "docker"
  disableRememberMe: false
  globalNodeProperties:
  - envVars:
      env:
      - key: "JENKINS_CREDENTIALS"
        value: "stash-jenkins"
      - key: "SONAR_USER_HOME"
        value: ".sonar"
  labelString: "any ubuntu ansible java molecule docker-compose"
  markupFormatter: "plainText"
  mode: NORMAL
  myViewsTabBar: "standard"
  numExecutors: 2
  primaryView:
    all:
      name: "all"
  projectNamingStrategy: "standard"
  quietPeriod: 5
  remotingSecurity:
    enabled: false
  scmCheckoutRetryCount: 0
  slaveAgentPort: 0
  updateCenter:
    sites:
    - id: "default"
      url: "https://updates.jenkins.io/update-center.json"
  views:
  - all:
      name: "all"
  viewsTabBar: "standard"
security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  envInject:
    enableLoadingFromMaster: false
    enablePermissions: false
    hideInjectedVars: false
  sSHD:
    port: -1
  scriptApproval:
    approvedSignatures:
    - "method groovy.lang.GString getBytes"
    - "method java.net.HttpURLConnection setRequestMethod java.lang.String"
    - "method java.net.URL openConnection"
    - "method org.jenkinsci.plugins.workflow.steps.FlowInterruptedException getCauses"
    - "method org.jenkinsci.plugins.workflow.support.actions.EnvironmentAction getEnvironment"
    - "method org.jenkinsci.plugins.workflow.support.steps.input.Rejection getUser"
    - "method org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder$BadgeManager\
      \ createSummary java.lang.String"
    - "staticMethod hudson.model.Hudson getInstance"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods toBoolean java.lang.Boolean"
    - "staticMethod org.codehaus.groovy.runtime.EncodingGroovyMethods encodeBase64\
      \ byte[]"
unclassified:
  ansiColorBuildWrapper:
    colorMaps:
    - black: "#000000"
      blackB: "#4C4C4C"
      blue: "#1E90FF"
      blueB: "#4682B4"
      cyan: "#00CDCD"
      cyanB: "#00FFFF"
      green: "#00CD00"
      greenB: "#00FF00"
      magenta: "#CD00CD"
      magentaB: "#FF00FF"
      name: "xterm"
      red: "#CD0000"
      redB: "#FF0000"
      white: "#E5E5E5"
      whiteB: "#FFFFFF"
      yellow: "#CDCD00"
      yellowB: "#FFFF00"
    - black: "#000000"
      blackB: "#555555"
      blue: "#0000AA"
      blueB: "#5555FF"
      cyan: "#00AAAA"
      cyanB: "#55FFFF"
      defaultBackground: 0
      defaultForeground: 7
      green: "#00AA00"
      greenB: "#55FF55"
      magenta: "#AA00AA"
      magentaB: "#FF55FF"
      name: "vga"
      red: "#AA0000"
      redB: "#FF5555"
      white: "#AAAAAA"
      whiteB: "#FFFFFF"
      yellow: "#AA5500"
      yellowB: "#FFFF55"
    - black: "black"
      blackB: "black"
      blue: "blue"
      blueB: "blue"
      cyan: "cyan"
      cyanB: "cyan"
      green: "green"
      greenB: "green"
      magenta: "magenta"
      magentaB: "magenta"
      name: "css"
      red: "red"
      redB: "red"
      white: "white"
      whiteB: "white"
      yellow: "yellow"
      yellowB: "yellow"
    - black: "#2E3436"
      blackB: "#2E3436"
      blue: "#3465A4"
      blueB: "#3465A4"
      cyan: "#06989A"
      cyanB: "#06989A"
      defaultBackground: 0
      defaultForeground: 7
      green: "#4E9A06"
      greenB: "#4E9A06"
      magenta: "#75507B"
      magentaB: "#75507B"
      name: "gnome-terminal"
      red: "#CC0000"
      redB: "#CC0000"
      white: "#D3D7CF"
      whiteB: "#D3D7CF"
      yellow: "#C4A000"
      yellowB: "#C4A000"
  audit-trail:
    logBuildCause: true
    pattern: ".*/(?:configSubmit|doDelete|postBuildResult|enable|disable|cancelQueue|stop|toggleLogKeep|doWipeOutWorkspace|createItem|createView|toggleOffline|cancelQuietDown|quietDown|restart|exit|safeExit)"
  badgePlugin:
    disableFormatHTML: false
  bitbucketEndpointConfiguration:
    endpoints:
    - bitbucketCloudEndpoint:
        enableCache: false
        manageHooks: false
        repositoriesCacheDuration: 0
        teamCacheDuration: 0
    - bitbucketServerEndpoint:
        displayName: "STASH"
        manageHooks: false
        serverUrl: "https://scm-git-eur.misys.global.ad"
  buildFailureAnalyzer:
    doNotAnalyzeAbortedJob: false
    gerritTriggerEnabled: true
    globalEnabled: true
    graphsEnabled: false
    knowledgeBase: "localFile"
    maxLogSize: 0
    noCausesEnabled: true
    noCausesMessage: "No problems were identified. If you know why this problem occurred,\
      \ please add a suitable Cause for it."
    nrOfScanThreads: 3
    testResultParsingEnabled: false
  buildStepOperation:
    enabled: false
  chosenViewsTabbarGlobalConfiguration:
    shortcutToFocusChosen: "F2"
  claimConfig:
    blockAutoRefreshWhileClaiming: false
    propagateToFollowingBuildsByDefault: false
    sendEmails: false
    sortUsersByFullName: false
    stickyByDefault: true
  cxScanBuilder:
    enableCertificateValidation: false
    filterPattern: |-
      !**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*,
      !**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr,     !**/*.iws,
      !**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
      !**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
      !**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
      !**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
      !**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
      !**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
      !**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
      !**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
      !**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*
    forcingVulnerabilityThresholdEnabled: false
    hideResults: false
    jobGlobalStatusOnError: FAILURE
    jobGlobalStatusOnThresholdViolation: FAILURE
    lockVulnerabilitySettings: true
    password: "{AQAAABAAAAAQrWdrbypWTPA/KP8YP5+MuHEms7xJ4YA9GYDvRKfNm/A=}"
    prohibitProjectCreation: false
    scanTimeOutEnabled: false
    scanTimeoutDuration: 1
  defaultFolderConfiguration:
    healthMetrics:
    - worstChildHealthMetric:
        recursive: true
  descriptionSetterWrapper:
    charset: "UTF-8"
    disableTokens: false
  extendedEmailPublisher:
    adminRequiredForTemplateTesting: false
    allowUnregisteredEnabled: false
    charset: "UTF-8"
    debugMode: false
    defaultBody: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:\r\n\r\nCheck\
      \ console output at $BUILD_URL to view the results."
    defaultContentType: "text/plain"
    defaultSubject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!"
    maxAttachmentSize: -1
    maxAttachmentSizeMb: 0
    precedenceBulk: false
    useSsl: false
    watchingEnabled: false
  fTPPublisher:
    flattenFilesSelectedByDefault: false
  gitHubConfiguration:
    apiRateLimitChecker: ThrottleForNormalize
  gitHubPluginConfig:
    hookUrl: "http://albandrieu:8686/jenkins/github-webhook/"
  gitSCM:
    createAccountBasedOnEmail: false
    showEntireCommitSummaryInChanges: false
    useExistingAccountWithSameEmail: false
  globalConfigFiles:
    configs:
    - globalMavenSettings:
        comment: "Global settings, copy of fr-maven-default"
        content: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\nLicensed to\
          \ the Apache Software Foundation (ASF) under one\nor more contributor license\
          \ agreements.  See the NOTICE file\ndistributed with this work for additional\
          \ information\nregarding copyright ownership.  The ASF licenses this file\n\
          to you under the Apache License, Version 2.0 (the\n\"License\"); you may\
          \ not use this file except in compliance\nwith the License.  You may obtain\
          \ a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\
          \nUnless required by applicable law or agreed to in writing,\nsoftware distributed\
          \ under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES\
          \ OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License\
          \ for the\nspecific language governing permissions and limitations\nunder\
          \ the License.\n-->\n\n<!--\n | This is the configuration file for Maven.\
          \ It can be specified at two levels:\n |\n |  1. User Level. This settings.xml\
          \ file provides configuration for a single user, \n |                 and\
          \ is normally provided in ^${user.home}/.m2/settings.xml.\n |\n |      \
          \           NOTE: This location can be overridden with the CLI option:\n\
          \ |\n |                 -s /path/to/user/settings.xml\n |\n |  2. Global\
          \ Level. This settings.xml file provides configuration for all Maven\n |\
          \                 users on a machine (assuming they're all using the same\
          \ Maven\n |                 installation). It's normally provided in \n\
          \ |                 ^${maven.home}/conf/settings.xml.\n |\n |          \
          \       NOTE: This location can be overridden with the CLI option:\n |\n\
          \ |                 -gs /path/to/global/settings.xml\n |\n | The sections\
          \ in this sample file are intended to give you a running start at\n | getting\
          \ the most out of your Maven installation. Where appropriate, the default\n\
          \ | values (values used when the setting is not specified) are provided.\n\
          \ |\n |-->\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" \n\
          \          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  \
          \        xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"\
          >\n  <!-- localRepository\n   | The path to the local repository maven will\
          \ use to store artifacts.\n   |\n   | Default: ~/.m2/repository\n  <localRepository>/path/to/local/repo</localRepository>\n\
          \  -->\n\n  <!-- interactiveMode\n   | This will determine whether maven\
          \ prompts you when it needs input. If set to false,\n   | maven will use\
          \ a sensible default value, perhaps based on some other setting, for\n \
          \  | the parameter in question.\n   |\n   | Default: true\n  <interactiveMode>true</interactiveMode>\n\
          \  -->\n\n  <!-- offline\n   | Determines whether maven should attempt to\
          \ connect to the network when executing a build.\n   | This will have an\
          \ effect on artifact downloads, artifact deployment, and others.\n   |\n\
          \   | Default: false\n  <offline>false</offline>\n  -->\n\n  <!-- pluginGroups\n\
          \   | This is a list of additional group identifiers that will be searched\
          \ when resolving plugins by their prefix, i.e.\n   | when invoking a command\
          \ line like \"mvn prefix:goal\". Maven will automatically add the group\
          \ identifiers\n   | \"org.apache.maven.plugins\" and \"org.codehaus.mojo\"\
          \ if these are not already contained in the list.\n   |-->\n  <pluginGroups>\n\
          \    <!-- pluginGroup\n     | Specifies a further group identifier to use\
          \ for plugin lookup.\n    <pluginGroup>com.your.plugins</pluginGroup>\n\
          \    -->\n  </pluginGroups>\n\n  <!-- proxies\n   | This is a list of proxies\
          \ which can be used on this machine to connect to the network.\n   | Unless\
          \ otherwise specified (by system property or command-line switch), the first\
          \ proxy\n   | specification in this list marked as active will be used.\n\
          \   |-->\n  <proxies>\n    <!-- proxy\n     | Specification for one proxy,\
          \ to be used in connecting to the network.\n     |\n    <proxy>\n      <id>optional</id>\n\
          \      <active>true</active>\n      <protocol>http</protocol>\n      <username>proxyuser</username>\n\
          \      <password>proxypass</password>\n      <host>proxy.host.net</host>\n\
          \      <port>80</port>\n      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>\n\
          \    </proxy>\n    -->\n  </proxies>\n\n  <!-- servers\n   | This is a list\
          \ of authentication profiles, keyed by the server-id used within the system.\n\
          \   | Authentication profiles can be used whenever maven must make a connection\
          \ to a remote server.\n   |-->\n  <servers>\n    <!-- server\n     | Specifies\
          \ the authentication information to use when connecting to a particular\
          \ server, identified by\n     | a unique name within the system (referred\
          \ to by the 'id' attribute below).\n     | \n     | NOTE: You should either\
          \ specify username/password OR privateKey/passphrase, since these pairings\
          \ are \n     |       used together.\n     |\n    <server>\n      <id>deploymentRepo</id>\n\
          \      <username>repouser</username>\n      <password>repopwd</password>\n\
          \    </server>\n    -->\n    \n    <!-- Another sample, using keys to authenticate.\n\
          \    <server>\n      <id>siteServer</id>\n      <privateKey>/path/to/private/key</privateKey>\n\
          \      <passphrase>optional; leave empty if not used.</passphrase>\n   \
          \ </server>\n    -->\n\t<server>\n        <id>homemade-release</id>\n  \
          \      <username>1Vjmqrmv</username>\n        <password>656pSLEw7cyBaW2pggThlnSJNh9UCAQ8MKmkpn0J/4wr</password>\n\
          \        <configuration>\n          <httpHeaders>\n            <property>\n\
          \              <name>User-Agent</name>\n              <value>Maven m2Release\
          \ java:^${java.vm.version} ^${env.BUILD_TAG}</value>\n            </property>\n\
          \          </httpHeaders>\n        </configuration>        \n    </server>\n\
          \    <server>\n        <id>homemade-snapshot</id>\n        <username>1Vjmqrmv</username>\n\
          \        <password>656pSLEw7cyBaW2pggThlnSJNh9UCAQ8MKmkpn0J/4wr</password>\n\
          \    </server>\n    \n    <server>\n        <id>local-nexus</id>\n     \
          \   <username>1Vjmqrmv</username>\n        <password>656pSLEw7cyBaW2pggThlnSJNh9UCAQ8MKmkpn0J/4wr</password>\n\
          \    </server>\n    \n    <server>\n        <id>gdynia-homemade-snapshot</id>\n\
          \        <username>mgr_test</username>\n        <password>mgr_test</password>\n\
          \    </server>\n    \n\t<!-- add default credentials to deploy snapshot\
          \ to UAT nexus -->\n    <server>\n        <id>releases</id>\n        <username>admin</username>\n\
          \        <password>admin123</password>\n        <configuration>\n      \
          \    <httpHeaders>\n            <property>\n              <name>User-Agent</name>\n\
          \              <value>Maven m2Release java:^${java.vm.version} ^${env.BUILD_TAG}</value>\n\
          \            </property>\n          </httpHeaders>\n        </configuration>\
          \    \n    </server>\n    <server>\n\t\t<id>snapshots</id>\n\t\t<username>admin</username>\n\
          \t\t<password>admin123</password>\n    </server>      \n  </servers>\n\n\
          \  <!-- mirrors\n   | This is a list of mirrors to be used in downloading\
          \ artifacts from remote repositories.\n   | \n   | It works like this: a\
          \ POM may declare a repository to use in resolving certain artifacts.\n\
          \   | However, this repository may have problems with heavy traffic at times,\
          \ so people have mirrored\n   | it to several places.\n   |\n   | That repository\
          \ definition will have a unique id, so we can create a mirror reference\
          \ for that\n   | repository, to be used as an alternate download site. The\
          \ mirror site will be the preferred \n   | server for that repository.\n\
          \   |-->\n  <mirrors>\n    <!-- mirror\n     | Specifies a repository mirror\
          \ site to use instead of a given repository. The repository that\n     |\
          \ this mirror serves has an ID that matches the mirrorOf element of this\
          \ mirror. IDs are used\n     | for inheritance and direct lookup purposes,\
          \ and must be unique across the set of mirrors.\n     |\n    <mirror>\n\
          \      <id>mirrorId</id>\n      <mirrorOf>repositoryId</mirrorOf>\n    \
          \  <name>Human Readable Name for this Mirror.</name>\n      <url>http://my.repository.com/repo/path</url>\n\
          \    </mirror>\n     -->\n    <mirror>\n      <id>nexus</id>\n      <url>http://192.168.1.57:8081/nexus/content/groups/mgr-public</url>\n\
          \      <mirrorOf>*,!thirdparty</mirrorOf>\n    </mirror>\n    <mirror>\n\
          \      <id>nexus-thirdparty</id>\n      <name>Nexus thirdparty repository\
          \ - all non-central dependencies</name>\n      <url>http://192.168.1.57:8081/nexus/content/repositories/thirdparty/</url>\n\
          \      <!-- Set to '*,!central' for non-fdev installations, and to 'nothing'\
          \ for fdev installations -->\n      <mirrorOf>*,!central</mirrorOf>\n  \
          \  </mirror>    \n  </mirrors>\n  \n  <!-- profiles\n   | This is a list\
          \ of profiles which can be activated in a variety of ways, and which can\
          \ modify\n   | the build process. Profiles provided in the settings.xml\
          \ are intended to provide local machine-\n   | specific paths and repository\
          \ locations which allow the build to work in the local environment.\n  \
          \ |\n   | For example, if you have an integration testing plugin - like\
          \ cactus - that needs to know where\n   | your Tomcat instance is installed,\
          \ you can provide a variable here such that the variable is \n   | dereferenced\
          \ during the build process to configure the cactus plugin.\n   |\n   | As\
          \ noted above, profiles can be activated in a variety of ways. One way -\
          \ the activeProfiles\n   | section of this document (settings.xml) - will\
          \ be discussed later. Another way essentially\n   | relies on the detection\
          \ of a system property, either matching a particular value for the property,\n\
          \   | or merely testing its existence. Profiles can also be activated by\
          \ JDK version prefix, where a \n   | value of '1.4' might activate a profile\
          \ when the build is executed on a JDK version of '1.4.2_07'.\n   | Finally,\
          \ the list of active profiles can be specified directly from the command\
          \ line.\n   |\n   | NOTE: For profiles defined in the settings.xml, you\
          \ are restricted to specifying only artifact\n   |       repositories, plugin\
          \ repositories, and free-form properties to be used as configuration\n \
          \  |       variables for plugins in the POM.\n   |\n   |-->\n  <profiles>\n\
          \    <!-- profile\n     | Specifies a set of introductions to the build\
          \ process, to be activated using one or more of the\n     | mechanisms described\
          \ above. For inheritance purposes, and to activate profiles via <activatedProfiles/>\n\
          \     | or the command line, profiles have to have an ID that is unique.\n\
          \     |\n     | An encouraged best practice for profile identification is\
          \ to use a consistent naming convention\n     | for profiles, such as 'env-dev',\
          \ 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.\n   \
          \  | This will make it more intuitive to understand what the set of introduced\
          \ profiles is attempting\n     | to accomplish, particularly when you only\
          \ have a list of profile id's for debug.\n     |\n     | This profile example\
          \ uses the JDK version to trigger activation, and provides a JDK-specific\
          \ repo.\n    <profile>\n      <id>jdk-1.4</id>\n\n      <activation>\n \
          \       <jdk>1.4</jdk>\n      </activation>\n\n      <repositories>\n  \
          \      <repository>\n          <id>jdk14</id>\n          <name>Repository\
          \ for JDK 1.4 builds</name>\n          <url>http://www.myhost.com/maven/jdk14</url>\n\
          \          <layout>default</layout>\n          <snapshotPolicy>always</snapshotPolicy>\n\
          \        </repository>\n      </repositories>\n    </profile>\n    -->\n\
          \n    <!--\n     | Here is another profile, activated by the system property\
          \ 'target-env' with a value of 'dev',\n     | which provides a specific\
          \ path to the Tomcat instance. To use this, your plugin configuration\n\
          \     | might hypothetically look like:\n     |\n     | ...\n     | <plugin>\n\
          \     |   <groupId>org.myco.myplugins</groupId>\n     |   <artifactId>myplugin</artifactId>\n\
          \     |   \n     |   <configuration>\n     |     <tomcatLocation>^${tomcatPath}</tomcatLocation>\n\
          \     |   </configuration>\n     | </plugin>\n     | ...\n     |\n     |\
          \ NOTE: If you just wanted to inject this configuration whenever someone\
          \ set 'target-env' to\n     |       anything, you could just leave off the\
          \ <value/> inside the activation-property.\n     |\n    <profile>\n    \
          \  <id>env-dev</id>\n\n      <activation>\n        <property>\n        \
          \  <name>target-env</name>\n          <value>dev</value>\n        </property>\n\
          \      </activation>\n\n      <properties>\n        <tomcatPath>/path/to/tomcat/instance</tomcatPath>\n\
          \      </properties>\n    </profile>\n    -->\n\t<profile>\n       <id>nexus</id>\n\
          \       <pluginRepositories>\n           <pluginRepository>\n          \
          \     <id>public</id>\n               <name>Public Repositories</name>\n\
          \               <url>http://alm-artifacts.misys.global.ad/nexus/content/groups/mgr-public</url>\n\
          \               <layout>default</layout>\n               <releases>\n  \
          \                 <enabled>true</enabled>\n                   <updatePolicy>never</updatePolicy>\n\
          \               </releases>\n               <snapshots>\n              \
          \     <enabled>true</enabled>\n                   <updatePolicy>daily</updatePolicy>\n\
          \               </snapshots>\n           </pluginRepository>\n       </pluginRepositories>\n\
          \       <repositories>\n           <repository>\n               <id>public</id>\n\
          \               <name>Public Repositories</name>\n               <url>http://alm-artifacts.misys.global.ad/nexus/content/groups/mgr-public</url>\n\
          \               <layout>default</layout>\n               <releases>\n  \
          \                 <enabled>true</enabled>\n                   <updatePolicy>never</updatePolicy>\n\
          \               </releases>\n               <snapshots>\n              \
          \     <enabled>true</enabled>\n                   <updatePolicy>interval:60</updatePolicy>\n\
          \                   <checksumPolicy>fail</checksumPolicy>\n            \
          \   </snapshots>\n           </repository>\n\n           <repository>\n\
          \               <id>homemade-release</id>\n               <name>Only for\
          \ publishing homemade releases</name>\n               <url>http://alm-artifacts.misys.global.ad/nexus/content/repositories/homemade-release</url>\n\
          \               <layout>default</layout>\n               <snapshots>\n \
          \                  <enabled>false</enabled>\n               </snapshots>\n\
          \               <releases>\n                   <enabled>false</enabled>\n\
          \                   <updatePolicy>never</updatePolicy>\n               </releases>\n\
          \           </repository>\n           <repository>\n               <id>homemade-snapshot</id>\n\
          \               <name>Only for publishing homemade snapshots</name>\n  \
          \             <url>http://alm-artifacts.misys.global.ad/nexus/content/repositories/homemade-snapshot</url>\n\
          \               <layout>default</layout>\n               <snapshots>\n \
          \                  <enabled>true</enabled>\n                   <updatePolicy>interval:60</updatePolicy>\n\
          \               </snapshots>\n               <releases>\n              \
          \     <enabled>false</enabled>\n               </releases>\n           </repository>\n\
          \       </repositories>\n    </profile>    \n    <profile>\n      <id>signing</id>\n\
          \      <properties>\n        <!-- <env.STOREPASS>{XiDq7l+KqFIHGOjOS2YJ+aZn+/VDNkepsecgIHQvW0U=}</env.STOREPASS>-->\
          \ <!-- changeit -->\n        <env.STOREPASS>{7FHv/XvzqiQHw1i0w1zTGqMK2VeR4l7wmBicHKvlwz6RT6ATOjSmjOOF5QnWw80w}</env.STOREPASS>\n\
          \        <env.KEYSTORE>../../Tool/Finastra.p12</env.KEYSTORE>\n        <env.ALIAS>finastra</env.ALIAS>\n\
          \      </properties>\n    </profile>\n    <profile>\n        <id>sonar</id>\n\
          \        <properties>\n            <sonar.login>{x1oKI0Sx2ZMHIFWOVp6iUViLA18LVuWr7NU8obC+XsGlU9of4LoG9/2WiZeSZuEDo3VfaRxWgoqSSgCvjCp8KQ==}</sonar.login>\
          \ <!-- c71b002ba25ba981183379e2ae9baa272a8eb79a -->\n            <sonar.pdf.password>{F6iHikf5kBwHRWjFwxALiKSsB1aUMKB7k/ZXDDr8Hec=}</sonar.pdf.password>\
          \ <!-- admin -->\n            <checkmarx.server.password>{lEWS7H25T9MHXPvVexqU2JZ1Z87FpngyTmdnTNxq5sY=}</checkmarx.server.password>\
          \  <!-- Misys#21 -->\n        </properties>\n    </profile>     \n  </profiles>\n\
          \n  <!-- activeProfiles\n   | List of profiles that are active for all builds.\n\
          \  -->\n  <activeProfiles>\n    <activeProfile>nexus</activeProfile>\n \
          \ </activeProfiles>\n</settings>\n"
        id: "mgr-settings-nexus"
        isReplaceAll: true
        name: "mgr-settings-nexus"
        providerId: "org.jenkinsci.plugins.configfiles.maven.GlobalMavenSettingsConfig"
    - globalMavenSettings:
        comment: "Global settings"
        content: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<settings xmlns=\"\
          http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
          \n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\
          \ http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\n    <localRepository>^${env.WORKSPACE}/.repository</localRepository>\n\
          \n    <servers>\n        <server>\n            <id>homemade-release</id>\n\
          \            <username>kvGFOvJS</username>\n            <password>+At4YqM9FUV5AXtArUiQUyW7oWTG0PL/myDmg0+CFg9G</password>\n\
          \        </server>\n        <server>\n            <id>homemade-snapshot</id>\n\
          \            <username>kvGFOvJS</username>\n            <password>+At4YqM9FUV5AXtArUiQUyW7oWTG0PL/myDmg0+CFg9G</password>\n\
          \        </server>\n      \t<server>\n\t\t    <id>TomcatServer</id>\n\t\t\
          \t<username>tomcat_admin</username>\n\t\t\t<password>serverpass</password>\n\
          \t\t</server>\n    </servers>\n\n    <mirrors>\n        <mirror>\n     \
          \       <!-- This sends everything else to /public -->\n            <id>nexus</id>\n\
          \            <mirrorOf>*</mirrorOf>\n            <url>http://bm-artifacts/maven/content/groups/public</url>\n\
          \        </mirror>\n    </mirrors>\n\n    <profiles>\n        <profile>\n\
          \            <id>custom</id>\n            <activation>\n               \
          \ <activeByDefault>true</activeByDefault>\n            </activation>\n \
          \           <properties>\n                <cargo.home>^${env.WORKSPACE}/.cargo</cargo.home>\n\
          \            </properties>\n        </profile>\n        <profile>\n    \
          \        <id>sonar</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n\
          \            </activation>\n            <properties>\n                <sonar.jdbc.url>jdbc:postgresql://bm-sonar.misys.global.ad/sonardb</sonar.jdbc.url>\n\
          \                <sonar.jdbc.username>sonar</sonar.jdbc.username>\n    \
          \            <sonar.jdbc.password>S0nar2014</sonar.jdbc.password>\n    \
          \            <sonar.host.url>http://bm-sonar.misys.global.ad</sonar.host.url>\n\
          \            </properties>\n        </profile>\n        <profile>\n    \
          \        <id>nexus</id>\n            <pluginRepositories>\n            \
          \    <pluginRepository>\n                    <id>public</id>\n         \
          \           <name>Public Repositories</name>\n                    <url>http://bm-artifacts/maven/content/groups/public</url>\n\
          \                    <layout>default</layout>\n                    <releases>\n\
          \                        <enabled>true</enabled>\n                    </releases>\n\
          \                    <snapshots>\n                        <enabled>true</enabled>\n\
          \                    </snapshots>\n                </pluginRepository>\n\
          \            </pluginRepositories>\n            <repositories>\n       \
          \         <repository>\n                    <id>public</id>\n          \
          \          <name>Public Repositories</name>\n                    <url>http://bm-artifacts/maven/content/groups/public</url>\n\
          \                    <layout>default</layout>\n                    <releases>\n\
          \                        <enabled>true</enabled>\n                    </releases>\n\
          \                    <snapshots>\n                        <enabled>true</enabled>\n\
          \                        <updatePolicy>interval:60</updatePolicy>\n    \
          \                    <checksumPolicy>fail</checksumPolicy>\n           \
          \         </snapshots>\n                </repository>\n\n              \
          \  <repository>\n                    <id>homemade-release</id>\n       \
          \             <name>Only for publishing homemade releases</name>\n     \
          \               <url>http://bm-artifacts/maven/content/repositories/homemade-release</url>\n\
          \                    <layout>default</layout>\n                    <releases>\n\
          \                        <enabled>false</enabled>\n                    </releases>\n\
          \                </repository>\n                <repository>\n         \
          \           <id>homemade-snapshot</id>\n                    <name>Only for\
          \ publishing homemade snapshots</name>\n                    <url>http://bm-artifacts/maven/content/repositories/homemade-snapshot</url>\n\
          \                    <layout>default</layout>\n                    <snapshots>\n\
          \                        <enabled>false</enabled>\n                    </snapshots>\n\
          \                </repository>\n            </repositories>\n        </profile>\n\
          \    </profiles>\n    <activeProfiles>\n        <!-- make the profile active\
          \ all the time -->\n        <activeProfile>nexus</activeProfile>\n    </activeProfiles>\n\
          </settings>\n"
        id: "mgr-settings-nexus-public"
        isReplaceAll: true
        name: "mgr-settings-nexus-public"
        providerId: "org.jenkinsci.plugins.configfiles.maven.GlobalMavenSettingsConfig"
    - globalMavenSettings:
        comment: "Global settings with security master"
        content: |
          <?xml version="1.0" encoding="UTF-8"?>
          <settingsSecurity>
            <master>{m5ck/xn/uf4HZpUo4yjuIO2KIf8VsmeYavrTd0owNu4=}</master>
          </settingsSecurity>
        id: "mgr-settings-security-nexus"
        isReplaceAll: true
        name: "mgr-settings-security-nexus"
        providerId: "org.jenkinsci.plugins.configfiles.maven.GlobalMavenSettingsConfig"
  globalConfigurationImpl:
    allResults: true
    enabled: true
    notificationTimeout: 15000
    queryTimeout: 30
  globalEventsPlugin:
    classPath: "workflow-job/WEB-INF/lib/workflow-job.jar"
    disableSynchronization: false
    onEventGroovyCode: "import groovy.json.*\nimport hudson.model.Hudson.*\nimport\
      \ jenkins.model.*\nimport java.lang.management.RuntimeMXBean\nimport java.lang.management.ManagementFactory\n\
      import hudson.model.*\nimport jenkins.metrics.impl.TimeInQueueAction\n\n//@Grab('org.jenkins-ci.plugins.workflow:workflow-job:2.37')\n\
      import org.jenkinsci.plugins.workflow.job.WorkflowRun\nimport org.jenkinsci.plugins.workflow.flow.FlowExecution;\n\
      import org.jenkinsci.plugins.workflow.graph.FlowGraphWalker;\nimport org.jenkinsci.plugins.workflow.graph.FlowNode;\n\
      //import org.jenkinsci.plugins.workflow.graph.StepStartNode;\nimport org.jenkinsci.plugins.workflow.cps.nodes.StepStartNode;\n\
      import org.jenkinsci.plugins.workflow.actions.WorkspaceAction\n\nlog.info(\"\
      Fired event '^${event}'.\")\n\n//import java.util.Base64 // requires java8\n\
      //auth = \"Basic \" + Base64.getEncoder().encodeToString(\"elastic:changeme\"\
      .getBytes()) // if no java8, compute basicAuth externally and hardcode it here\n\
      auth = null\nnexusUrl = 'http://localhost/jenkins-events-listener/regex.json'\n\
      esUrl = 'http://monitoring_elasticsearch:9200'\njenkinsIndex = 'new.jenkins-'+\
      \ new Date().format('yyyyMM')\ntimeout = 5 //seconds\n\nnow = System.currentTimeMillis()\
      \ // ms since epoch\ninstance = Jenkins.instance\n\nif (event == Event.JOB_FINALIZED)\
      \ {\n    if (run.getParent() instanceof hudson.maven.MavenModule) {\n      \
      \  return\n    }\n    def nodeStatistics = nodeStatistics()\n    def getJVMMemoryUsage\
      \ = getJVMMemoryUsage()\n    def doc = [\n        '@timestamp'        : now,\n\
      \        'buildScheduleTime' : run.getTimeInMillis(),                      \
      \     // ms since epoch\n        'buildStartTime'    : run.getStartTimeInMillis(),\
      \                      // ms since epoch\n        'buildDuration'     : run.getDuration(),\
      \                               // ms\n        'buildTimeInQueue'  : run.getStartTimeInMillis()-run.getTimeInMillis(),//\
      \ ms\n        'jobName'           : env.JOB_NAME,\n        'buildResult'   \
      \    : run.getResult().toString(),\n        'buildResultValue'  : mapResultToValue()[run.getResult().toString()],\n\
      \        'jenkinsMaster'     : getJenkinsMasterName(),\n        'jenkinsMasterUrl'\
      \  : jenkins.getRootUrl(),\n        'buildId'           : env.BUILD_NUMBER,\
      \                                //run.getNumber()\n        'buildUrl'     \
      \     : env.BUILD_URL,                                   // run.getUrl() (relative\
      \ url)\n        'buildNode'         : getBuildNodes(),\n        'jobType'  \
      \         : run.getParent().class.toString().minus(~/.*\\.|class /),\n     \
      \   'queueNumber'       : jenkins.queue.items.length,\n        'nodesNumber'\
      \       : nodeStatistics['nodesNumber'],\n        'numberNodesOffline': nodeStatistics['numberNodesOffline'],\n\
      \        'numberNodesOnline' : nodeStatistics['numberNodesOnline'],\n      \t\
      'busyExecutors'\t\t: nodeStatistics['busyExecutors'],\n      \t'idleExecutors'\t\
      \t: nodeStatistics['idleExecutors'],\n        'totalExecutors'    : nodeStatistics['totalExecutors'],\n\
      \        'runnigJobNumber'   : numberOfRunnigJobs(),\n      \t'jvmTotalMemory'\t\
      : getJVMMemoryUsage['totalMemory'],\n      \t'jvmMaxMemory'\t\t: getJVMMemoryUsage['maxMemory'],\n\
      \      \t'jvmFreeMemory'\t\t: getJVMMemoryUsage['freeMemory'],\n    ]\n//Junit\
      \ Results\n   if (run.getActions(hudson.tasks.junit.TestResultAction.class))\
      \ {\n        def junit = run.getAction(hudson.tasks.junit.TestResultAction.class)\n\
      \        doc += junitCount(junit)\n    }\n    if (run.getActions(hudson.tasks.test.AggregatedTestResultPublisher.TestResultAction.class))\
      \ {\n        def junit = run.getAction(hudson.tasks.test.AggregatedTestResultPublisher.TestResultAction.class)\n\
      \        doc += junitCount(junit)\n    }\n\n    if (run.getActions(hudson.maven.reporters.SurefireAggregatedReport)){\n\
      \        def junit = run.getAction(hudson.maven.reporters.SurefireAggregatedReport.class)\n\
      \        doc += junitCount(junit)\n    }\n\n//Robot Framework Results\n    if\
      \ (run.getAction(hudson.plugins.robot.RobotBuildAction.class)) {\n        def\
      \ robotClass = run.getAction(hudson.plugins.robot.RobotBuildAction.class)\n\
      \        def robotResults = robotClass.result\n        doc += [\n          \
      \  'robotOverallTotal': robotResults.overallTotal,\n            'robotOverallPassed':\
      \ robotResults.overallPassed,\n            'robotOverallFailed': robotResults.overallFailed,\n\
      \            'robotPassPercentage': robotClass.overallPassPercentage,\n    \
      \        'robotCriticalTotal': robotResults.criticalTotal,\n            'robotCriticalPassed':\
      \ robotResults.criticalPassed,\n            'robotCriticalFailed': robotResults.criticalFailed\
      \ ,\n            'robotCriticalPassPercentage': robotClass.criticalPassPercentage,\n\
      \        ]\n    }\n\n    def getChangeSets = run.getChangeSets()\n\n\n    if\
      \ (env.containsKey('GIT_URL')) {\n        doc += [\n            'gitUrl': env.GIT_URL,\n\
      \            'gitBranch': env.GIT_BRANCH,\n            'gitCommit': env.GIT_COMMIT,\n\
      \          ]\n        if(env.GIT_AUTHOR_EMAIL) {\n            doc += [\n   \
      \             'gitAuthorEmailString': env.GIT_AUTHOR_EMAIL.toString(),\n   \
      \         ]\n        }\n    }\n\n    if (run.getResult().toString() != 'SUCCESS')\
      \ {\n        def regex = ''\n        try {\n            regex = jsonParse(getDataFromURL(nexusUrl)).join('|')\n\
      \        }\n        catch (err) {\n            println \"[WARN][NEXUS] returned:\
      \ ^${err}\"\n            regex = ['java.nio.file.FileAlreadyExistsException:(.*)workspace',\n\
      \                    'Cannot contact(.*): java.lang.InterruptedException',\n\
      \                    'java.nio.file.FileSystemException:(.*)Input/output error',\n\
      \                    'java.io.IOException: Failed to mkdirs:',\n           \
      \         'process apparently never started in',\n                    'Agent\
      \ went offline',\n                    'Process table full',\n              \
      \      'JENKINS-(.*)if on an extremely laggy filesystem',\n                \
      \    'Cannot open session, connection is not authenticated'].join('|')\n   \
      \     }\n        def errorsFromLog = []\n        def tailLog = run.getLog(1000)\n\
      \        if (tailLog.size() > 0) {\n            for (int x = 0; x < tailLog.size();\
      \ x++) {\n                if (tailLog[x] =~ /(^${regex})/) {\n             \
      \       errorsFromLog.add(tailLog[x])\n                }\n            }\n  \
      \      }\n        if (errorsFromLog.size() > 0) {\n            doc += [\n  \
      \              errors: errorsFromLog.unique()\n            ]\n        }\n  \
      \  }\n\n    else if (env.containsKey('SVN_URL')) {\n        doc += [\n     \
      \       svnUrl: env.SVN_URL,\n            svnRevision: env.SVN_REVISION\n  \
      \        ]\n    }\n  \t// Number of data pushed to Elastic is to big\n    if(conditionForPushing())\
      \ {\n        queueStatistics()\n    }\n    insertElasticDoc(\"buildResult\"\
      , doc, auth)\n}\nelse if (event == Event.PLUGIN_SCHEDULE) {\n    if(conditionForPushing())\
      \ {\n        queueStatistics()\n    }\n}\n\ndef getJenkinsMasterName() {\n \
      \   return jenkins.getRootUrl().minus(~/.*\\/\\//).minus(~/[\\.:].*/) // or\
      \ env.JENKINS_URL, but not declared in schedule events\n}\n\ndef getBuildNodes()\
      \ {\n    if(run instanceof WorkflowRun) {\n        nodeList = []\n        exec\
      \ = run.getExecution();\n        if(exec != null) {\n            for (FlowNode\
      \ n : new FlowGraphWalker(exec)) {\n                if (n instanceof StepStartNode)\
      \ {\n                    node = null\n                    action = n.getAction(WorkspaceAction);\n\
      \                    if(action) {\n                        node = action.getNode().toString();\n\
      \                    }\n                    if (node) {\n                  \
      \      nodeList += node\n                    }\n                }\n        \
      \    }\n        }\n        return nodeList.unique()\n    } else {\n        //\
      \ run.getExecutor().getOwner().getName() ?: run.getExecutor().getOwner().getHostName()\
      \ // name or IP if no name\n        return env.NODE_NAME\n    }\n}\n\ndef sendElasticRequest(apiCmd,\
      \ text, contentType, auth=null, timeout=5) {\n    def conn = new URL(\"^${esUrl}/^${jenkinsIndex}/^${apiCmd}\"\
      ).openConnection()\n    if (auth) {\n        conn.setRequestProperty (\"Authorization\"\
      , auth)\n    }\n    conn.setConnectTimeout(1000*timeout)\n    conn.setReadTimeout(1000*timeout)\n\
      \    conn.setRequestMethod(\"POST\")\n    conn.setDoOutput(true)\n    conn.setRequestProperty(\"\
      Content-Type\", contentType)\n    conn.getOutputStream().write(text.getBytes(\"\
      UTF-8\"))\n    def postRC = conn.getResponseCode()\n    if (postRC<200 || postRC>299)\
      \ {\n        println \"[WARN][ELASTIC] Request {$apiCmd}\"\n        println\
      \ text.replaceAll(\"(?m)^\", \"[WARN][ELASTIC]     \").trim()\n        println\
      \ \"[WARN][ELASTIC] returned ^${postRC} : \" + conn.getInputStream().getText()\n\
      \    }\n}\n\ndef insertElasticDoc(type, doc, auth=nuFworll, timeout=5) {\n \
      \   sendElasticRequest(\"^${type}\", JsonOutput.toJson(doc), \"application/json\"\
      , auth, timeout)\n}\n\n// docDatas is a list of [docType: doc]\ndef insertElasticDocs(docDatas,\
      \ auth=null, timeout=5) {\n    if (docDatas) {\n        def text = \"\"\n  \
      \      docDatas.each{ docData -> docData.each{ docType, doc -> text += JsonOutput.toJson([\"\
      index\": [\"_type\": docType]])+\"\\n\"+JsonOutput.toJson(doc)+\"\\n\" } }\n\
      \        sendElasticRequest(\"_bulk\", text, \"application/x-ndjson\", auth,\
      \ timeout)\n    }\n}\n\ndef getDataFromURL(def url, def timeout=5) {\n    def\
      \ data = ''\n    def conn = new URL(url).openConnection()\n    conn.setConnectTimeout(1000*timeout)\n\
      \    conn.setReadTimeout(1000*timeout)\n    conn.setRequestMethod(\"GET\")\n\
      \    def connRC = conn.getResponseCode()\n    if(connRC.equals(200)) {\n   \
      \     data = conn.getInputStream().getText()\n    }\n    return data\n}\n\n\
      def jsonParse(def json) {\n    return new groovy.json.JsonSlurperClassic().parseText(json)\n\
      }\n\ndef nodeStatistics() {\n    final jenkins = instance\n    def nodeStatistics\
      \ = [:]\n    int nodesNumber = 0\n    int numberNodesOnline = 0\n    int numberNodesOffline\
      \ = 0\n    for (def computer in jenkins.computers) {\n        if (computer.isOffline())\
      \ {\n            numberNodesOffline++\n        }\n        else {\n         \
      \   numberNodesOnline++\n        }\n        nodesNumber++\n    }\n    def getInstance\
      \ = Jenkins.getInstance()\n  \tif (getInstance != null) {\n        nodeStatistics['totalExecutors']\
      \ = getInstance.getComputer().getTotalExecutors()\n        nodeStatistics['nodesNumber']\
      \ = nodesNumber\n        nodeStatistics['numberNodesOffline'] = numberNodesOffline\n\
      \        nodeStatistics['numberNodesOnline'] = numberNodesOnline\n        nodeStatistics['busyExecutors']\
      \ = getInstance.getComputer().getBusyExecutors()\n        nodeStatistics['idleExecutors']\
      \ = getInstance.getComputer().getIdleExecutors()\n    }\n    return nodeStatistics\n\
      }\n\ndef queueStatistics() {\n  \tdef queue = jenkins.model.Jenkins.getInstance().getQueue().getItems()\n\
      \  \tdef jobQueueUrl = []\n  \tqueue.each{\n      \tjobQueueUrl.add(it.task.getUrl())\n\
      \        def docs = [\n          \t\t'@timestamp'        : now,\n          \
      \      'buildResult'       : 'inQueue',\n                'jenkinsMaster'   \
      \  : getJenkinsMasterName(),\n                'inQueue' \t\t    : (now - it.getInQueueSince()),\n\
      \                'jobQueueUrl' \t    : it.task.getUrl(),\n                'jenkinsMasterUrl'\
      \  : jenkins.getRootUrl(),\n        ]\n     \tif (docs.size() > 0) {\n  \t\t\
      \tinsertElasticDoc('buildResult', docs, auth, 5)\n  \t\t}\n    }\n    runningJobs(jobQueueUrl)\n\
      }\n\ndef runningJobs(def jobUrl) {\n  def buildingJobs = instance.getAllItems(hudson.model.Job.class).findAll\
      \ { hudson.model.Job job -> job.isBuilding() }\n  buildingJobs.each { hudson.model.Job\
      \ job  ->\n    job.builds.findAll { hudson.model.Run run ->\n      if (run.isBuilding()\
      \ &&  (!jobUrl.contains(run.getUrl()))) {\n         def docs = [\n         \
      \   '@timestamp'    \t: now,\n            'jenkinsMaster' \t: getJenkinsMasterName(),\n\
      \            'jobDuration'    \t: (now - run.getStartTimeInMillis()),\n    \
      \        'buildStatus'\t\t: 'IN_PROGRESS',\n            'jobBuildingUrl'   \
      \ : run.getUrl(),\n            'jenkinsMasterUrl'  : jenkins.getRootUrl(),\n\
      \            ]\n        if (docs.size() > 0) {\n  \t\t\tinsertElasticDoc('buildResult',\
      \ docs, auth, 5)\n  \t\t}\n      }\n    }\n  }\n}\n\ndef getJVMMemoryUsage()\
      \ {\n  \tdef jvmMemoryUsage = [:]\n\tRuntime runtime = Runtime.getRuntime()\n\
      \  \tjvmMemoryUsage['freeMemory'] \t= runtime.freeMemory()\n  \tjvmMemoryUsage['totalMemory']\
      \ \t= runtime.totalMemory()\n  \tjvmMemoryUsage['maxMemory'] \t= runtime.maxMemory()\n\
      \n  return jvmMemoryUsage\n}\n\ndef numberOfRunnigJobs() {\n    int countOngoingBuilds\
      \ = (instance.getAllItems(hudson.model.Job.class).findAll { it.isBuilding()}).size()\n\
      \    if (countOngoingBuilds > 0) {\n        return countOngoingBuilds\n    }\n\
      \    return 0\n}\n                            // 3 minutes\ndef conditionForPushing(def\
      \ delay=180000) {\n    context.timeStamp = context.timeStamp ?: 0\n    if ((now\
      \ - context.timeStamp) > delay) {\n        context.timeStamp = now\n       \
      \ return true\n    }\n    return false\n}\n\ndef mapResultToValue() {\n    def\
      \ resultToValue = [:]\n    resultToValue['SUCCESS'] = 10\n    resultToValue['UNSTABLE']\
      \ = 20\n    resultToValue['ABORTED'] = 30\n    resultToValue['NOT_BUILT'] =\
      \ 40\n    resultToValue['FAILURE'] = 50\n\n    return resultToValue\n}\n\ndef\
      \ junitCount(def junit) {\n    float junitFailCount = junit.getFailCount() ?:\
      \ 0\n    float junitTotalCount = junit.getTotalCount() ?: 0\n    float junitSkipCount\
      \ = junit.getSkipCount() ?: 0\n    float junitPassCount = (junitTotalCount -\
      \ junitSkipCount - junitFailCount)\n    float junitFailPercent = (junitFailCount\
      \ / junitTotalCount)\n    float junitSkipPercent = (junitSkipCount / junitTotalCount)\n\
      \    float junitPassPercent = (junitPassCount / junitTotalCount)\n\n    def\
      \ docs = [\n        'junitFailCount': junitFailCount,\n        'junitTotalCount':\
      \ junitTotalCount,\n        'junitSkipCount': junitSkipCount,\n        'junitPassCount':\
      \ junitPassCount,\n        'junitFailPercent': junitFailPercent,\n        'junitSkipPercent':\
      \ junitSkipPercent,\n        'junitPassPercent': junitPassPercent\n    ]\n\n\
      \    return docs\n}\n"
  globalLibraries:
    libraries:
    - defaultVersion: "develop"
      name: "jenkins-pipeline-scripts"
      retriever:
        modernSCM:
          scm:
            git:
              credentialsId: "stash-jenkins"
              id: "4441289d-7238-4170-b32f-a35d3b86ae4c"
              remote: "https://scm-git-eur.misys.global.ad/scm/rktmp/jenkins-pipeline-scripts.git"
              traits:
              - "gitBranchDiscovery"
  globalSettings:
    failOnCorrupt: false
    noAuthors: false
    quietMode: false
  hudsonSoundsNotifier:
    pipeTimeoutSecs: 5
    playMethod: BROWSER
    soundArchive: "classpath:sound-archive.zip"
  ivyBuildTrigger:
    extendedVersionMatching: false
  jiraGlobalConfiguration:
    sites:
    - url: "https://almtools.misys.global.ad/jira/"
  location:
    adminAddress: "Adresse pas encore configurée <nobody@nowhere>"
    url: "http://albandrieu:8686/jenkins/"
  logParser:
    legacyFormatting: false
  mailer:
    charset: "UTF-8"
    useSsl: false
  mavenModuleSet:
    localRepository: "default"
  naginatorPublisher:
    regexpTimeoutMs: 30000
  notifyBitbucket:
    considerUnstableAsSuccess: false
    disableInprogressNotification: false
    ignoreUnverifiedSsl: false
    includeBuildNumberInKey: false
    prependParentProjectKey: false
  pollSCM:
    pollingThreadCount: 10
  prometheusConfiguration:
    collectingMetricsPeriodInSeconds: 120
    countAbortedBuilds: true
    countFailedBuilds: true
    countNotBuiltBuilds: true
    countSuccessfulBuilds: true
    countUnstableBuilds: true
    defaultNamespace: "default"
    fetchTestResults: true
    jobAttributeName: "jenkins_job"
    path: "prometheus"
    processingDisabledBuilds: false
    useAuthenticatedEndpoint: false
  robotConfig:
    buildsToShowInResultsColumn: 15
    robotResultsColumnEnabled: true
    xAxisLabelFormat: "#$build"
  sonarGlobalConfiguration:
    buildWrapperEnabled: false
    installations:
    - credentialsId: "alm-sonar2-token"
      name: "alm-sonar2"
      serverUrl: "https://sonardev.misys.global.ad/"
      triggers:
        skipScmCause: false
        skipUpstreamCause: false
  sshPublisher:
    commonConfig:
      disableAllExec: false
      encryptedPassphrase: "{AQAAABAAAAAQvA9iPknuECXGz4Ab2o/Zo1NjY3rCeNUj5GE96OXmuqs=}"
  timestamperConfig:
    allPipelines: false
    elapsedTimeFormat: "'<b>'HH:mm:ss.S'</b> '"
    systemTimeFormat: "'<b>'HH:mm:ss'</b> '"
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
  pipelineMaven:
    triggerDownstreamUponResultAborted: false
    triggerDownstreamUponResultFailure: false
    triggerDownstreamUponResultNotBuilt: false
    triggerDownstreamUponResultSuccess: true
    triggerDownstreamUponResultUnstable: false
