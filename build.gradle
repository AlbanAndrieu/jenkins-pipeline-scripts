import java.util.zip.ZipFile
import com.test.gradle.*

plugins {
    id 'io.codearte.nexus-staging' version '0.8.0'
    id 'org.gradle.test-retry' version '1.0.0'
    id 'org.jenkins-ci.jpi' version '0.38.0'
    id 'ru.vyarus.animalsniffer' version '1.6.0'
    //id 'com.github.spotbugs' version '3.0.0'
    //id 'codenarc'
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
  throw new GradleException("Build requires Java ${JavaVersion.VERSION_1_8}")
}

apply plugin: 'groovy'
apply plugin: 'maven'
//apply plugin: 'signing'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    maven {
        url 'https://maven.springframework.org/release'
    }
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
    maven {
      url 'http://repo.mycompany.com/maven2'
    }
}

configurations {
  ivy
}

group = 'com.test'
archivesBaseName = 'jenkins-pipeline-scripts'
version = '1.0-SNAPSHOT'

dependencies {
    compile    group: 'javax.servlet',         name: 'javax.servlet-api',     version: '3.1.0'
    compile    group: 'org.jenkins-ci.main',   name: 'jenkins-core',          version: '2.102'
    compile            group: 'org.codehaus.groovy',   name: 'groovy-all',            version: '2.4.6'
    compile            group: 'com.cloudbees',         name: 'groovy-cps',            version: '1.12'
    compile            group: 'commons-io',            name: 'commons-io',            version: '2.5'
    compile            group: 'org.assertj',           name: 'assertj-core',          version: '3.4.1'
    compile            group: 'org.apache.commons',    name: 'commons-math3',         version: '3.4.1'
    testCompile        group: 'com.lesfurets',         name: 'jenkins-pipeline-unit', version: '1.8'
    testCompile        group: 'org.assertj',           name: 'assertj-core',          version: '3.4.1'
    testCompile        group: 'junit',                 name: 'junit',                 version: '4.11'
    ivy                group: 'org.apache.ivy',        name: 'ivy',                   version: '2.4.0'
}

// Get external properties from file
if (project.hasProperty('extProps')) {
  def props = new Properties()
  file("$extProps").withInputStream { props.load(it) }
  props.stringPropertyNames().forEach {
        ext."$it" = props.getProperty(it)
  }
}

defaultTasks 'test'

tasks.withType(GroovyCompile) {
  groovyClasspath += configurations.ivy
}

artifacts {
    archives javadocJar, sourcesJar
}

//signing {
//    sign configurations.archives
//}

if (project.hasProperty('maxParallelForks')) {
  project.maxParallelForks = Integer.valueOf(project.maxParallelForks, 10)
} else {
  ext.maxParallelForks = 3
}

animalsniffer {
    toolVersion = '1.18'
    sourceSets = [sourceSets.main]
    // We need to exclude this dependency from animalsniffer since it contains an invalid class
    excludeJars 'icu4j-*'
}

//spotbugs {
//    toolVersion '3.1.12'
//    // This prevents logging some errors when SpotBugs tries to open files as jar files.
//    // See https://github.com/gradle/gradle/issues/1094.
//    sourceSets = [sourceSets.main]
//}
//
//spotbugsMain {
//    classes = sourceSets.main.output
//}

//codenarc {
//    toolVersion '1.5'
//    sourceSets = [sourceSets.test]
//}

test {
    systemProperties['hudson.model.DownloadService.noSignatureCheck'] = 'true'
    //exclude '**/integration/**'
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    maxParallelForks = project.maxParallelForks
    retry {
      maxRetries = 1
      maxFailures = 10
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      def repo = project.hasProperty('repository') ?
                            project.repository :
                            'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      repository(url: repo) {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      def snapRepo = project.hasProperty('snapshotRepository') ?
                            project.snapshotRepository :
                            'https://oss.sonatype.org/content/repositories/snapshots/'
      snapshotRepository(url: snapRepo) {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name "$project.group:$project.archivesBaseName"
        packaging 'jar'
        description 'Jenkins Pipeline Unit testing framework'
        url 'https://github.com/test/JenkinsPipelineUnit'

        scm {
          url 'https://github.com/test/JenkinsPipelineUnit'
          connection 'scm:git:git://github.com/test/JenkinsPipelineUnit.git'
          developerConnection 'scm:git:git@github.com/test/JenkinsPipelineUnit.git'
        }

        licenses {
          license {
            name 'MIT License'
            url 'http://www.opensource.org/licenses/mit-license.php'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'aandrieu'
            name 'Albn Andrieu'
            email 'alban.andrieu@free.fr'
            url 'https://github.com/AlbanAndrieu'
            organization 'sample.com'
            organizationUrl 'https://github.com/sample'
          }
        }
      }
        }
    }
}

nexusStaging {
    delayBetweenRetriesInMillis = 5000
}

// Deploy tasks
closeAndReleaseRepository.mustRunAfter(uploadArchives)
closeRepository.enabled = !project.version.toString().endsWith('-SNAPSHOT')
releaseRepository.enabled = !project.version.toString().endsWith('-SNAPSHOT')

task verify(dependsOn: build)
task deploy(dependsOn: [build, uploadArchives, closeAndReleaseRepository])

// Release commits and tag
//task writeVersion(type: SetVersionTask)
//task commitRelease(type: GitCommitTask, dependsOn: [writeVersion])
//task tagVersion(type: GitTagTask, dependsOn: [writeVersion, commitRelease])
//task writeNextSnapshot(type: SetNextSnapshotVersionTask)
//task commitNextDevVersion(type: GitCommitTask, dependsOn: [writeNextSnapshot]) {
//    message = "Next dev version"
//}

//task release(dependsOn: [writeVersion, tagVersion, commitRelease])
//task nextDevVersion(dependsOn: [writeNextSnapshot, commitNextDevVersion])

def checkArchiveManifest(File archive) {
  new ZipFile(archive).withCloseable { archiveZip ->
    archiveZip.getInputStream(archiveZip.getEntry('META-INF/MANIFEST.MF')).withStream {
      assert it.text.contains("Plugin-Version: ${project.version}"): "Wrong metadate in file ${archive} - run a clean build"
    }
  }
}

tasks.withType(AbstractArchiveTask) {
  inputs.property('pluginVersion') {
    project.version
  }
}

task checkArchiveManifests {
  dependsOn jar, war
  doLast {
    checkArchiveManifest(jar.archiveFile.get().asFile)
    checkArchiveManifest(war.archiveFile.get().asFile)
  }
}

tasks.withType(AbstractPublishToMaven) {
  dependsOn checkArchiveManifests
}

task createWrapperZip(type: Zip) {
  archiveFileName = 'wrapper.zip'
  destinationDirectory = new File(sourceSets.test.output.resourcesDir, 'gradle')

  from(project.rootDir) {
    include('gradle/**')
    include('gradlew*')
  }
}

processTestResources.dependsOn(createWrapperZip)
